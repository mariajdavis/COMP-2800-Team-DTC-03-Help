{"version":3,"sources":["img/applied.png","img/bg.png","img/chase.png","img/catepillar.jpg","img/farmer.JPG","img/beach.png","components/EasterEgg/help.mp3","img/profile_bg.png","http-common.js","services/jobPost.service.js","services/auth.service.js","services/tag.service.js","components/GoogleMap/mapSearch.js","components/JobBoardPage/add-jobPost.component.js","components/JobBoardPage/jobPost.component.js","services/apply.service.js","components/ApplyPage/apply.component.js","components/GoogleMap/CustomInfoWindow.js","components/GoogleMap/map.component.js","components/JobBoardPage/ViewJobPage.js","components/JobBoardPage/JobBoardPage.js","components/Registration/register.component.js","components/Login/logIn.component.js","components/Bodyframe/Bodyframe.js","components/Footer/Footer.js","services/auth-header.js","services/user.service.js","components/Profiles/user-profile.component.js","components/EasterEgg/Beatle.js","components/EasterEgg/helpers.js","components/EasterEgg/Virus.js","components/EasterEgg/EasterEgg.js","components/AboutUs/aboutUs.component.js","components/JobBoardPage/savedJobs.component.js","components/Profiles/editUserProfile.component.js","components/Profiles/org-profile.component.js","components/JobBoardPage/OrgJobBoardPage.js","components/JobBoardPage/ViewApplicantPage.js","App.js","serviceWorker.js","index.js","img/logo.jpg"],"names":["module","exports","axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","orgId","API_URL","email","password","then","response","accessToken","localStorage","setItem","JSON","stringify","removeItem","username","parse","getItem","SearchLocation","props","React","useState","address","setAddress","lat","lng","setCoordinates","handleSelect","value","a","geocodeByAddress","results","getLatLng","latLng","callData","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","className","placeholder","map","suggestion","style","backgroundColor","active","description","required","role","AddJobPost","onChangeTitle","bind","onChangeDescription","onChangeJobType","onChangeRate","onChangeContractLength","onChangeStartDate","saveJobPost","newJobPost","setTags","onChangeLocation","saveMapData","currentOrgUser","AuthService","getCurrentOrgUser","state","jobType","rate","contractLength","startDate","orgID","submitted","tagArray","location","coordinates","e","options","target","tags","i","l","length","selected","push","console","log","this","setState","o","Array","JobPostDataService","forEach","tag","tagText","tagData","jobPostID","TagDataService","catch","saveJobTag","place","onClick","htmlFor","type","validations","name","multiple","Component","JobPost","getJobPost","updateJobPost","deleteJobPost","goBack","currentJobPost","message","history","match","params","prevState","update","applicationID","newStatus","config","bucketName","region","accessKeyId","secretAccessKey","Apply","onChangeResumePath","onChangeComments","submitApplication","upload","newApplication","currentUser","getCurrentUser","parseInt","userID","resumePath","comments","newResumePath","resPath","toString","ReactS3","uploadFile","files","pathString","err","ApplyDataService","src","happyBear","rows","cols","CustomInfoWindows","infoWindowRef","createRef","contentElement","document","createElement","prevProps","children","ReactDOM","render","Children","only","current","infowindow","setContent","ref","MapContainer","onMarkerClick","jobPost","markerCoords","concatCoords","position","sameCoordsJobs","jobs","activePosition","showingOptionsWindow","selectedMultiple","handleDisplayWindow","showingInfoWindow","userId","jobPostId","findSaved","res","currentJobPostSaved","found","onClose","activeMarker","displayMarkers","index","key","displayOptions","Button","variant","onOptionsClick","onCloseOptions","handleSave","sendToApplicationPage","styling","coords","concat","saveHandle","save","visible","display","gridRowGap","window","assign","google","zoom","initialCenter","displayOptionsWindow","Card","width","Body","Title","Subtitle","Text","GoogleApiWrapper","apiKey","ViewJobPage","onChangeSearchTitle","retrieveJobPosts","refreshList","setActiveJobPost","removeAllJobPosts","searchTitle","logOut","orgLogOut","handleJobView","jobPosts","currentIndex","toggleHandler","currentView","getAll","deleteAll","findByTitle","logout","orgLogout","ToggleButtonGroup","defaultValue","ToggleButton","getElementById","classList","remove","add","color","to","height","margin","JobBoardPage","user","href","isEmail","vusername","vpassword","Register","handleRegister","onChangeUsername","onChangeEmail","onChangeFullName","onChangePhoneNumber","onChangePassword","handleRegisterType","fullName","phoneNumber","successful","registerType","preventDefault","form","validateAll","checkBtn","context","_errors","register","componentDidMount","error","resMessage","orgRegister","onSubmit","c","justifyContent","class","autocomplete","checked","marginLeft","marginTop","logIn","handleLogin","onChangeLoginType","loginType","login","reload","orgLogin","autoComplete","disabled","mainBody","backgroundFrame","footerStyle","bottom","zIndex","marginBottom","fontStyle","paddingBottom","verticalAlign","Footer","authHeader","Profile","retrieveUserInfo","UserDataService","findOneUser","HelpLogo","Beatle","args","radius","onDie","shape","Image","keys","up","y","down","left","x","right","screen","translate","rotate","rotation","Math","PI","strokeStyle","fillStyle","lineWidth","beginPath","moveTo","lineTo","closePath","fill","stroke","restore","randomNumBetween","min","max","random","randomNumBetweenExcluding","exMin","exMax","Virus","velocity","deathRadius","lifeSpan","score","addScore","destroy","arc","KEY","EasterEgg","innerWidth","innerHeight","ratio","devicePixelRatio","space","virusCount","currentScore","topScore","inGame","beatle","virus","keyCode","addEventListener","handleKeys","handleResize","audio","refs","canvas","getContext","requestAnimationFrame","removeEventListener","clearRect","scale","count","generateVirus","checkCollisionsWith","updateObjects","points","round","createObject","gameOver","newX","newY","item","group","items","splice","items1","items2","b","item1","item2","checkCollision","obj1","obj2","vx","vy","sqrt","endgame","startGame","mp3_file","autoPlay","loop","AboutUs","eggHandle","$","hide","beach","chase","farmer","Catepillar","SavedJobs","getAllSaved","browserHistory","createBrowserHistory","EditUserProfile","updateUser","returnToUserProfile","createdAt","updatedAt","mounted","nextProps","nextState","htmlForm","OrgProfile","orgJobList","jobPostings","OrgJobBoardPage","createJobMessage","currentJobMsg","appId","quote","handleClick","url","text","ViewApplicantPage","retrieveApplicants","setActiveApplicant","applicants","currentApplicant","findAllOrgApplicants","application","applicant","DropdownButton","Dropdown","Item","updateStatus","App","Navbar","expand","Brand","fontFamily","fontSize","Toggle","aria-controls","Collapse","Nav","Link","exact","path","component","GoogleMap","SavedJobPosts","LogIn","JobPostsList","UserProfile","OrgJobBoard","ViewApplicants","Boolean","hostname","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8fe0a0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/applied.21bfa330.png\";","module.exports = __webpack_public_path__ + \"static/media/bg.d777f5c8.png\";","module.exports = __webpack_public_path__ + \"static/media/chase.6b8d70f4.png\";","module.exports = __webpack_public_path__ + \"static/media/catepillar.e086543f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/farmer.f50267ba.JPG\";","module.exports = __webpack_public_path__ + \"static/media/beach.20bae3d7.png\";","module.exports = __webpack_public_path__ + \"static/media/help.c7a03952.mp3\";","module.exports = __webpack_public_path__ + \"static/media/profile_bg.188ac4a9.png\";","import axios from \"axios\";\n\nexport default axios.create({\n  // baseURL: \"http://localhost:8080/api\",\n  baseURL: \"https://helpservices.herokuapp.com/api\",\n  headers: {\n    \"Content-type\": \"application/json\",\n  }\n});\n","import http from \"../http-common\";\n\nclass JobPostDataService {\n  getAll() {\n    return http.get(\"/jobPosts\");\n  }\n\n  get(id) {\n    return http.get(`/jobPosts/${id}`);\n  }\n\n  create(data) {\n    return http.post(\"/jobPosts\", data);\n  }\n\n  update(id, data) {\n    return http.put(`/jobPosts/${id}`, data);\n  }\n\n  delete(id) {\n    return http.delete(`/jobPosts/${id}`);\n  }\n\n  deleteAll() {\n    return http.delete(`/jobPosts`);\n  }\n\n  findByTitle(title) {\n    return http.get(`/jobPosts?title=${title}`);\n  }\n\n  findSaved(data) {\n    return http.post(\"/jobPosts/saved/find\",data);\n  }\n\n  saveHandle(data) {\n    return http.post(\"/jobPosts/saved/save\",data);\n  }\n\n  getAllSaved(id){\n    return http.get(`/jobPosts/saved/${id}`);\n  }\n\n  findByOrgId(orgId) {\n    return http.get(`/jobPosts?orgId=${orgId}`);\n  }\n\n  deleteAllOrg(orgId) {\n    return http.delete(`/jobPosts?orgId=${orgId}`);\n  }\n\n  findOrgPostByTitle(title, orgId) {\n    return http.get(`/jobPosts?title=${title}&orgId=${orgId}`);\n  }\n}\n\nexport default new JobPostDataService();","import axios from \"axios\";\nimport http from \"../http-common\";\n\nconst API_URL=\"http://localhost:8080/api/auth/\";\n//const API_URL = \"https://helpservices.herokuapp.com/api/auth/\";\n\nclass AuthService {\n    login(email, password) {\n        return axios\n            .post(API_URL + \"signin\", {\n                email,\n                password\n            })\n            .then(response => {\n                if (response.data.accessToken) {\n                    localStorage.setItem(\"user\", JSON.stringify(response.data));\n                }\n\n                return response.data;\n            });\n    }\n\n    orgLogin(email, password) {\n        return axios\n            .post(API_URL + \"orgsignin\", {\n                email,\n                password\n            })\n            .then(response => {\n                if (response.data.accessToken) {\n                    localStorage.setItem(\"orgUser\", JSON.stringify(response.data));\n                }\n\n                return response.data;\n            });\n    }\n\n    logout() {\n        localStorage.removeItem(\"user\");\n    }\n\n    orgLogout() {\n        localStorage.removeItem(\"orgUser\");\n    }\n\n    register(username, email, password) {\n        return axios.post(API_URL + \"signup\", {\n            username,\n            email,\n            password\n        });\n    }\n\n    orgRegister(username, email, password) {\n        return axios.post(API_URL + \"orgsignup\", {\n            username,\n            email,\n            password\n        });\n    }\n\n    getCurrentUser() {\n        return JSON.parse(localStorage.getItem('user'));;\n    }\n\n    getCurrentOrgUser() {\n        return JSON.parse(localStorage.getItem('orgUser'));;\n    }\n\n    findOneUser(id) {\n        return http.get(`/user/${id}`)\n    }\n}\n\nexport default new AuthService();","import http from \"../http-common\";\r\n\r\nclass TagDataService {\r\n\r\n  create(data) {\r\n    return http.post(\"/tags\", data);\r\n  }\r\n\r\n  // findAll(tag) {\r\n  //   return http.get(`/tags?tag=${tag}`);\r\n  // }\r\n}\r\n\r\nexport default new TagDataService();","import React from \"react\";\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng\r\n} from \"react-places-autocomplete\";\r\nimport AddJobPost from \"../JobBoardPage/add-jobPost.component\";\r\n\r\n\r\n/** Search for places */\r\nexport default function SearchLocation(props) {\r\n    const [address, setAddress] = React.useState(\"\");\r\n    const [coordinates, setCoordinates] = React.useState({\r\n        lat: null,\r\n        lng: null\r\n    })\r\n\r\n    const handleSelect = async (value) => {\r\n        /**\r\n         * Get name of the location and its latitude and longitude\r\n         * \r\n         * @param {string} value a name of the location\r\n         */\r\n        const results = await geocodeByAddress(value);\r\n        const latLng = await getLatLng(results[0]);\r\n        setAddress(value);\r\n        setCoordinates(latLng);\r\n        \r\n        /** pass location and latlng info to add-jobPost page */\r\n        props.callData(value, latLng); \r\n    }\r\n\r\n\r\n    return (\r\n            <PlacesAutocomplete\r\n                value={address}\r\n                onChange={setAddress}\r\n                onSelect={handleSelect}>\r\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                    <div>\r\n                        <input className=\"form-control\" {...getInputProps({ placeholder: \"Type address\" })} />\r\n\r\n                        <div>\r\n                            {loading ? <div>...loading</div> : null}\r\n\r\n                            {suggestions.map((suggestion) => {\r\n                                const style = {\r\n                                    backgroundColor: suggestion.active ? \"#3399FF\" : \"#fff\"\r\n                                }\r\n\r\n                                return (\r\n                                <div {...getSuggestionItemProps(suggestion, { style })}>\r\n                                    {suggestion.description}\r\n                                </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </PlacesAutocomplete>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport JobPostDataService from \"../../services/jobPost.service\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport TagDataService from \"../../services/tag.service\";\r\nimport \"../Layouts/ContentLayout.css\"\r\nimport SearchLocation from \"../GoogleMap/mapSearch\";\r\nimport \"../Registration/registration.css\"\r\n\r\nconst required = value => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        *Required field\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Creates add job post component\r\n */\r\nexport default class AddJobPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.onChangeJobType = this.onChangeJobType.bind(this);\r\n    this.onChangeRate = this.onChangeRate.bind(this);\r\n    this.onChangeContractLength = this.onChangeContractLength.bind(this);\r\n    this.onChangeStartDate = this.onChangeStartDate.bind(this);\r\n    this.saveJobPost = this.saveJobPost.bind(this);\r\n    this.newJobPost = this.newJobPost.bind(this);\r\n    this.setTags = this.setTags.bind(this);\r\n    this.onChangeLocation = this.onChangeLocation.bind(this);\r\n    this.saveMapData = this.saveMapData.bind(this);\r\n\r\n    var currentOrgUser = AuthService.getCurrentOrgUser();\r\n\r\n    this.state = {\r\n      id: null,\r\n      title: \"\",\r\n      description: \"\",\r\n      jobType: \"\",\r\n      rate: \"\",\r\n      contractLength: \"\",\r\n      startDate: \"\",\r\n      orgID: currentOrgUser.id,\r\n      submitted: false,\r\n      tagArray: null,\r\n      location: \"\",\r\n      coordinates: {lat: null, lng: null}\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets tagArray of current jobPost object to values from form\r\n   * \r\n   * @param {*} e \r\n   */\r\n  setTags(e) {\r\n    var options = e.target.options;\r\n    var tags = [];\r\n    for (var i = 0, l = options.length; i < l; i++) {\r\n      if (options[i].selected) {\r\n        tags.push(options[i].value);\r\n        console.log(options[i].value);\r\n      }\r\n    }\r\n    this.setState({\r\n      tagArray: [...e.target.options].map(o => o.value)\r\n    })\r\n    this.tagArray = new Array();\r\n    this.tagArray = tags;\r\n    console.log(this.tagArray);\r\n  }\r\n\r\n  /**\r\n   * Updates value of current job post title field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeTitle(e) {\r\n    this.setState({\r\n      title: e.target.value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates value of current job post description field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeDescription(e) {\r\n    this.setState({\r\n      description: e.target.value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates value of current job post jobType field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeJobType(e) {\r\n    this.setState({\r\n      jobType: e.target.value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates value of current job post rate field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeRate(e) {\r\n    this.setState({\r\n      rate: e.target.value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates value of current job post contractLength field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeContractLength(e) {\r\n    this.setState({\r\n      contractLength: e.target.value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates value of current job post startDate field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeStartDate(e) {\r\n    this.setState({\r\n      startDate: e.target.value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates value of current job post location field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeLocation(e) {\r\n    this.setState({\r\n      location: e.target.value\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Adds job post record to database\r\n   */\r\n  saveJobPost() {\r\n\r\n    var data = {\r\n      title: this.state.title,\r\n      description: this.state.description,\r\n      jobType: this.state.jobType,\r\n      rate: this.state.rate,\r\n      contractLength: this.state.contractLength,\r\n      startDate: this.state.startDate,\r\n      orgID: this.state.orgID,\r\n      location: this.state.location,\r\n      lat: this.state.coordinates.lat,\r\n      lng: this.state.coordinates.lng\r\n    };\r\n\r\n    JobPostDataService.create(data)\r\n      .then(response => {\r\n        console.log(response.data.id)\r\n        this.setState({\r\n          id: response.data.id,\r\n          title: response.data.title,\r\n          description: response.data.description,\r\n          jobType: response.data.jobType,\r\n          rate: response.data.rate,\r\n          contractLength: response.data.contractLength,\r\n          startDate: response.data.startDate,\r\n          orgID: response.data.orgID,\r\n          location: response.data.location,\r\n          lat: response.data.lat,\r\n          lng: response.data.lng,\r\n          submitted: true\r\n        });\r\n        this.tagArray.forEach(tag => {\r\n          saveJobTag(tag, response.data.id);\r\n        });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n\r\n    function saveJobTag(tagText, id) {\r\n      var tagData = {\r\n        jobPostID: id,\r\n        tag: tagText\r\n      }\r\n      TagDataService.create(tagData)\r\n        .then(response => {\r\n          console.log(response);\r\n        })\r\n        .catch(e => {\r\n          console.log(e);\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets current job post to null values, resetting\r\n   * submitted field to false\r\n   */\r\n  newJobPost() {\r\n    this.setState({\r\n      id: null,\r\n      title: \"\",\r\n      description: \"\",\r\n      jobType: \"\",\r\n\r\n      submitted: false\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Saves jobPost map location (lat and long)\r\n   * \r\n   * @param {*} place \r\n   * @param {*} latLng \r\n   */\r\n  saveMapData(place, latLng) {\r\n    this.setState({\r\n      location: place,\r\n      coordinates: latLng\r\n    })\r\n    console.log(this.state.location)\r\n    console.log(this.state.coordinates)\r\n  }\r\n\r\n  /**\r\n   * Renders add job post component\r\n   */\r\n  render() {\r\n\r\n    return (\r\n      <div id=\"contentLayoutRegister\">\r\n        <div id=\"contentDivRegister\">\r\n          <div>\r\n          <div id=\"registration-background\">\r\n            {this.state.submitted ? (\r\n              <div>\r\n                <h4>You submitted successfully!</h4>\r\n                <button className=\"btn btn-success\" onClick={this.newJobPost}>\r\n                  Add\r\n            </button>\r\n                </div>\r\n              ) : (\r\n                  <div id=\"addJobArea\">\r\n                      \r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"title\">Title</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"title\"\r\n                        validations={[required]}\r\n                        value={this.state.title}\r\n                        onChange={this.onChangeTitle}\r\n                        name=\"title\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"description\">Description</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"description\"\r\n                        validations={[required]}\r\n                        value={this.state.description}\r\n                        onChange={this.onChangeDescription}\r\n                        name=\"description\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"jobType\">Paid or Volunteer</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"jobType\"\r\n                        \r\n                        value={this.state.jobType}\r\n                        onChange={this.onChangeJobType}\r\n                        name=\"jobType\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"title\">Hourly Rate</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"rate\"\r\n                        \r\n                        value={this.state.rate}\r\n                        onChange={this.onChangeRate}\r\n                        name=\"rate\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"description\">Start Date</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"startDate\"\r\n                        \r\n                        value={this.state.startDate}\r\n                        onChange={this.onChangeStartDate}\r\n                        name=\"startDate\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"jobType\">Length of Contract</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"contractLength\"\r\n                        \r\n                        value={this.state.contractLength}\r\n                        onChange={this.onChangeContractLength}\r\n                        name=\"contractLength\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\" id=\"tagSelect\">\r\n                      <label htmlFor=\"jobType\">Tags</label><br></br>\r\n                      <select id=\"tags\" name=\"tags\" onChange={this.setTags} multiple>\r\n                        <option value=\"Volunteer\">Volunteer</option>\r\n                        <option value=\"Delivery\">Delivery</option>\r\n                        <option value=\"Food\">Food</option>\r\n                        <option value=\"Essential\">Essential</option>\r\n                        <option value=\"Elderly\">Elderly</option>\r\n                        <option value=\"Hospital\">Hospital</option>\r\n                        <option value=\"Charity\">Charity</option>\r\n                        <option value=\"Charity\">Education</option>\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"jobType\">Location</label>\r\n                      <SearchLocation callData={this.saveMapData}></SearchLocation>\r\n                      {/* <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"contractLength\"\r\n                      required\r\n                      value={this.state.contractLength}\r\n                      onChange={this.onChangeContractLength}\r\n                      name=\"contractLength\"\r\n                    /> */}\r\n                  </div>\r\n\r\n                  <div>\r\n                    Hold down the Ctrl (Windows) or Command (Mac) button to select multiple tags.\r\n              <br></br>\r\n                    <button onClick={this.saveJobPost} className=\"btn btn-success\">\r\n                      Submit\r\n            </button>\r\n                  </div>\r\n\r\n\r\n\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport JobPostDataService from \"../../services/jobPost.service\";\r\nimport \"./../Layouts/ContentLayout.css\"\r\n\r\n/**\r\n * Creates jobPost component for editing a job post\r\n */\r\nexport default class JobPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.onChangeJobType = this.onChangeJobType.bind(this);\r\n    this.onChangeStartDate = this.onChangeStartDate.bind(this);\r\n    this.onChangeRate = this.onChangeRate.bind(this);\r\n    this.onChangeContractLength = this.onChangeContractLength.bind(this);\r\n    this.getJobPost = this.getJobPost.bind(this);\r\n    this.updateJobPost = this.updateJobPost.bind(this);\r\n    this.deleteJobPost = this.deleteJobPost.bind(this);\r\n    this.goBack = this.goBack.bind(this);\r\n\r\n    this.state = {\r\n      currentJobPost: {\r\n        id: null,\r\n        title: \"\",\r\n        description: \"\",\r\n        jobType: \"\",\r\n        rate: \"\",\r\n        contractLength: \"\",\r\n        startDate: \"\",\r\n        orgID: \"\"\r\n      },\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns to previous page\r\n   */\r\n  goBack(){\r\n    this.props.history.goBack()\r\n  }\r\n\r\n  /**\r\n   * Calls function to set current jobPost using params id field\r\n   */\r\n  componentDidMount() {\r\n    this.getJobPost(this.props.match.params.id);\r\n  }\r\n\r\n  /**\r\n   * Updates current job post title field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeTitle(e) {\r\n    const title = e.target.value;\r\n\r\n    this.setState(function (prevState) {\r\n      return {\r\n        currentJobPost: {\r\n          ...prevState.currentJobPost,\r\n          title: title\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n   /**\r\n   * Updates current job post description field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeDescription(e) {\r\n    const description = e.target.value;\r\n\r\n    this.setState(prevState => ({\r\n      currentJobPost: {\r\n        ...prevState.currentJobPost,\r\n        description: description\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Updates current job post jobType field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeJobType(e) {\r\n    const jobType = e.target.value;\r\n\r\n    this.setState(prevState => ({\r\n      currentJobPost: {\r\n        ...prevState.currentJobPost,\r\n        jobType: jobType\r\n      }\r\n    }));\r\n  }\r\n\r\n   /**\r\n   * Updates current job post startDate field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeStartDate(e) {\r\n    const startDate = e.target.value;\r\n\r\n    this.setState(function (prevState) {\r\n      return {\r\n        currentJobPost: {\r\n          ...prevState.currentJobPost,\r\n          startDate: startDate\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates current job post rate field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeRate(e) {\r\n    const rate = e.target.value;\r\n\r\n    this.setState(prevState => ({\r\n      currentJobPost: {\r\n        ...prevState.currentJobPost,\r\n        rate: rate\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Updates current job post contractLength field\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeContractLength(e) {\r\n    const contractLength = e.target.value;\r\n\r\n    this.setState(prevState => ({\r\n      currentJobPost: {\r\n        ...prevState.currentJobPost,\r\n        contractLength: contractLength\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Retrieves job post from database using jobPost id\r\n   * \r\n   * @param {*} id \r\n   */\r\n  getJobPost(id) {\r\n    JobPostDataService.get(id)\r\n      .then(response => {\r\n        this.setState({\r\n          currentJobPost: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Updates job post in database\r\n   */\r\n  updateJobPost() {\r\n    JobPostDataService.update(\r\n      this.state.currentJobPost.id,\r\n      this.state.currentJobPost\r\n    )\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          message: \"The jobPost was updated successfully!\"\r\n        });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Deletes job post from database\r\n   */\r\n  deleteJobPost() {    \r\n    JobPostDataService.delete(this.state.currentJobPost.id)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.props.history.push('/jobPosts')\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Renders edit job page component\r\n   */\r\n  render() {\r\n    const { currentJobPost } = this.state;\r\n\r\n    return (\r\n      <div id=\"contentLayoutRegister\">\r\n        <div id=\"contentDivRegister\">\r\n          <div>\r\n          <div id=\"registration-background\">\r\n            {currentJobPost ? (\r\n              <div>\r\n                <h4>JobPost</h4>\r\n                <div>\r\n                  <form id=\"addJobArea\">\r\n\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"title\"><strong>Title</strong></label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"title\"\r\n                        value={currentJobPost.title}\r\n                        onChange={this.onChangeTitle}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"description\"><strong>Description</strong></label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"description\"\r\n                        value={currentJobPost.description}\r\n                        onChange={this.onChangeDescription}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>\r\n                        <strong>Job Type: </strong>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"jobType\"\r\n                        value={currentJobPost.jobType}\r\n                        onChange={this.onChangeJobType}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>\r\n                        <strong>Hourly Rate: </strong>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"rate\"\r\n                        value={currentJobPost.rate}\r\n                        onChange={this.onChangeRate}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>\r\n                        <strong>Start Date: </strong>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"startDate\"\r\n                        value={currentJobPost.startDate}\r\n                        onChange={this.onChangeStartDate}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label>\r\n                        <strong>Contract Length: </strong>\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"contractLength\"\r\n                        value={currentJobPost.contractLength}\r\n                        onChange={this.onChangeContractLength}\r\n                      />\r\n                    </div>\r\n\r\n\r\n\r\n                    <button\r\n                      className=\"badge badge-danger mr-2\"\r\n                      onClick={this.deleteJobPost}\r\n                    >\r\n                      Delete\r\n            </button>\r\n\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"badge badge-success\"\r\n                      onClick={this.updateJobPost}\r\n\r\n                    >\r\n                      Update\r\n            </button>\r\n                  </form>\r\n                  <p>{this.state.message}</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n                <div>\r\n                  <br />\r\n                  <p><center>Job post deleted!</center></p>\r\n                </div>\r\n              )}\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n","import http from \"../http-common\";\r\n\r\nclass ApplyDataService {\r\n  getAll() {\r\n    return http.get(\"/applications\");\r\n  }\r\n\r\n  findAllOrgApplicants(orgID) {\r\n    return http.get(`/applications/${orgID}`);\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`/applications/${id}`);\r\n  }\r\n\r\n  create(data) {\r\n    return http.post(\"/applications\", data);\r\n  }\r\n\r\n  updateStatus(applicationID, newStatus) {\r\n    return http.put(`applications/${applicationID}/${newStatus}`)\r\n  }\r\n\r\n}\r\n\r\nexport default new ApplyDataService();","import React, { Component } from \"react\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport ApplyDataService from \"../../services/apply.service\";\r\nimport ReactS3 from 'react-s3';\r\nimport '../AboutUs/AboutUs.css';\r\nimport './apply.css';\r\nimport happyBear from '../../img/applied.png';\r\n\r\n/**\r\n * AWS S3 file storage config\r\n */\r\nconst config = {\r\n  bucketName: 'helpresumes',\r\n  region: 'us-west-2',\r\n  accessKeyId: 'AKIAIRAIJ67CYYUYKRVA',\r\n  secretAccessKey: '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'\r\n}\r\n\r\n/**\r\n * Creates application component\r\n */\r\nexport default class Apply extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeResumePath = this.onChangeResumePath.bind(this);\r\n    this.onChangeComments = this.onChangeComments.bind(this);\r\n    this.submitApplication = this.submitApplication.bind(this);\r\n    this.upload = this.upload.bind(this);\r\n    this.newApplication = this.newApplication.bind(this);\r\n\r\n    var currentUser = AuthService.getCurrentUser();\r\n\r\n    this.state = {\r\n      id: null,\r\n      jobPostID: parseInt(this.props.match.params.id),\r\n      userID: currentUser.id,\r\n      resumePath: \"\",\r\n      comments: \"\"\r\n    };\r\n  }\r\n\r\n  /**\r\n  * Updates resumePath field for current application\r\n  */\r\n  onChangeResumePath(newResumePath) {\r\n    const resPath = newResumePath.toString();\r\n    this.setState({\r\n      resumePath: resPath\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates comments field for current applications\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeComments(e) {\r\n    this.setState({\r\n      comments: e.target.value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Uploads file to AWS file storage, sets resumePath field \r\n   * of current application to returned data.location value\r\n   * if successful\r\n   * \r\n   * @param {*} e \r\n   */\r\n  upload(e) {\r\n    ReactS3.uploadFile(e.target.files[0], config)\r\n      .then((data) => {\r\n        const path = data.location;\r\n        const pathString = path.toString();\r\n        this.setState({\r\n          resumePath: pathString\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Adds application object to database, updating current application\r\n   * object values if successful\r\n   */\r\n  submitApplication() {\r\n    var data = {\r\n      jobPostID: this.state.jobPostID,\r\n      userID: this.state.userID,\r\n      resumePath: this.state.resumePath,\r\n      comments: this.state.comments\r\n    };\r\n\r\n    ApplyDataService.create(data)\r\n      .then(response => {\r\n        this.setState({\r\n          id: response.data.id,\r\n          jobPostID: response.data.jobPostID,\r\n          userID: response.data.userID,\r\n          resumePath: response.data.resumePath,\r\n          comments: response.data.comments,\r\n          submitted: true\r\n        });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Resets current application to null values and sets submitted\r\n   * back to false\r\n   */\r\n  newApplication() {\r\n    this.setState({\r\n      id: null,\r\n      jobPostID: null,\r\n      userID: null,\r\n      resumePath: \"\",\r\n      comments: \"\",\r\n      submitted: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Renders application componetn\r\n   */\r\n  render() {\r\n\r\n    return (\r\n      <div id='contentLayout'>\r\n        <div id='contentDiv'>\r\n          {this.state.submitted ? (\r\n            <div id='applied-container'>\r\n              <div>\r\n                <h1 id=\"applied-text\">You applied to this job successfully!</h1>\r\n              </div>\r\n              <img id=\"applied-img\" src={happyBear} />\r\n            </div>\r\n          ) : (\r\n              <div id='applyBackground'>\r\n                <div id='applyContainer'>\r\n                  <div id='resumeContainer'>\r\n                    <label id=\"resume-label\" htmlFor=\"resumePath\">Resume:</label>\r\n                    <input\r\n                      type=\"file\"\r\n                      id=\"resumePath\"\r\n                      required\r\n                      onChange={this.upload}\r\n                      name=\"resumePath\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div id='commentContainer'>\r\n                    <label id=\"comment-label\" htmlFor=\"comments\">Comments:</label>\r\n                    <textarea\r\n                      rows=\"5\"\r\n                      cols=\"60\"\r\n                      type=\"text\"\r\n                      id=\"comments\"\r\n                      required\r\n                      value={this.state.comments}\r\n                      onChange={this.onChangeComments}\r\n                      name=\"comments\"\r\n                      placeholder=\"Type comments here\"\r\n                    />\r\n                  </div>\r\n\r\n                  <button id='submitBtn' onClick={this.submitApplication} className=\"btn btn-success\">\r\n                    Submit\r\n                  </button>\r\n                </div>\r\n\r\n              </div>\r\n\r\n            )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { InfoWindow } from \"google-maps-react\";\r\n\r\n/**\r\n * Source: https://stackoverflow.com/questions/53615413/how-to-add-a-button-in-infowindow-with-google-maps-react\r\n * \r\n * Used the top answer in this thread. This custom infowindows allows onclick events on infowindows.\r\n */\r\nexport default class CustomInfoWindows extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.infoWindowRef = React.createRef();\r\n      this.contentElement = document.createElement(`div`);\r\n    }\r\n  \r\n    componentDidUpdate(prevProps) {\r\n      if (this.props.children !== prevProps.children) {\r\n        ReactDOM.render(\r\n          React.Children.only(this.props.children),\r\n          this.contentElement\r\n        );\r\n        this.infoWindowRef.current.infowindow.setContent(this.contentElement);\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      return <InfoWindow ref={this.infoWindowRef} {...this.props} />;\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\nimport CustomInfoWindow from './CustomInfoWindow';\r\nimport JobPostDataService from \"../../services/jobPost.service\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport { Button, Card } from 'react-bootstrap';\r\n\r\n/**\r\n * Implementation of the React Google Map api. Shows job posts as clickable markers on a google map.\r\n */\r\nexport class MapContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSave = this.handleSave.bind(this);\r\n    this.sendToApplicationPage = this.sendToApplicationPage.bind(this);\r\n    this.onOptionsClick = this.onOptionsClick.bind(this);\r\n    this.state = {\r\n      jobs: props.jobs,\r\n      showingInfoWindow: false,\r\n      activeMarker: {},\r\n      selected: {},\r\n      activePosition: null,\r\n      currentUser: AuthService.getCurrentUser(),\r\n      currentJobPostSaved: true,\r\n      styling: props.styling,\r\n      markerCoords: null,\r\n      showingOptionsWindow: false,\r\n      selectedMultiple: {},\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a dictionary of coordinates:count to store how many job posts are at each set of coordinates.\r\n   */\r\n  componentDidMount() {\r\n    let coords = {};\r\n    for (let i = 0; i < this.state.jobs.length; i++) {\r\n      let found = false;\r\n      let j = 0;\r\n      if (coords[this.concatCoords(this.state.jobs[i])]) {\r\n        coords[this.concatCoords(this.state.jobs[i])]++\r\n      }\r\n      else {\r\n        coords[this.concatCoords(this.state.jobs[i])] = 1;\r\n      }\r\n    }\r\n    this.setState({\r\n      markerCoords: coords\r\n    })\r\n  }\r\n\r\n  concatCoords(jobPost) {\r\n    return jobPost.lat.toString().concat(\"+\", jobPost.lng.toString());\r\n  }\r\n\r\n  handleSave(e) {\r\n    if (e.target.value === \"save\") {\r\n      JobPostDataService.saveHandle({ userId: this.state.currentUser.id, jobPostId: this.state.selected.id, save: true })\r\n      this.setState({ currentJobPostSaved: true });\r\n    }\r\n    else {\r\n      JobPostDataService.saveHandle({ userId: this.state.currentUser.id, jobPostId: this.state.selected.id, save: false })\r\n      this.setState({ currentJobPostSaved: false });\r\n    }\r\n  }\r\n\r\n  onMarkerClick = (jobPost) => {\r\n    if (this.state.markerCoords[this.concatCoords(jobPost.position)] > 1) {\r\n      let sameCoordsJobs = [];\r\n      for (let i = 0; i < this.state.jobs.length; i++) {\r\n        if (this.state.jobs[i].lat == jobPost.position.lat && this.state.jobs[i].lng == jobPost.position.lng) {\r\n          sameCoordsJobs.push(this.state.jobs[i]);\r\n        }\r\n      }\r\n      this.setState({\r\n        activePosition: {\r\n          lat: jobPost.position.lat,\r\n          lng: jobPost.position.lng\r\n        },\r\n        showingOptionsWindow: true,\r\n        selectedMultiple: sameCoordsJobs\r\n      })\r\n    }\r\n    else {\r\n      this.handleDisplayWindow(jobPost);\r\n    }\r\n  }\r\n\r\n  handleDisplayWindow = (jobPost) => {\r\n    this.setState({\r\n      selected: this.state.jobs[jobPost.id],\r\n      activePosition: {\r\n        lat: jobPost.position.lat,\r\n        lng: jobPost.position.lng\r\n      },\r\n      showingInfoWindow: true,\r\n      showingOptionsWindow: false\r\n    });\r\n    if (this.state.currentUser) {\r\n      var data = {\r\n        userId: this.state.currentUser.id,\r\n        jobPostId: this.state.jobs[jobPost.id].id\r\n      };\r\n      JobPostDataService.findSaved(data).then(res => {\r\n        this.setState({\r\n          currentJobPostSaved: res.data.found ? true : false,\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  onClose = () => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null,\r\n        activePosition: null,\r\n        selected: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  displayMarkers = () => {\r\n    return this.state.jobs.map((jobPost, index) => {\r\n      return (\r\n        <Marker\r\n          key={index}\r\n          id={index}\r\n          position={{\r\n            lat: jobPost.lat,\r\n            lng: jobPost.lng\r\n          }}\r\n          onClick={this.onMarkerClick.bind(jobPost)} >\r\n        </Marker>\r\n      )\r\n    })\r\n  }\r\n\r\n  onOptionsClick(e) {\r\n    this.onCloseOptions();\r\n    let index = 0;\r\n    let count = 0;\r\n    while (this.state.jobs[index].id != e.target.value && count < this.state.jobs.length) {\r\n      index++;\r\n    }\r\n    let data = {\r\n      id: index,\r\n      position: { lat: this.state.jobs[index].lat, lng: this.state.jobs[index].lng }\r\n    }\r\n    this.handleDisplayWindow(data);\r\n  }\r\n  displayOptions = () => {\r\n    return this.state.selectedMultiple.map((jobPost, index) => {\r\n      return (\r\n        < div key={jobPost.id + index}>\r\n          <Button variant=\"outline-info\" value={jobPost.id} onClick={this.onOptionsClick}>{jobPost.title}</Button>\r\n        </div >\r\n      )\r\n    })\r\n  }\r\n\r\n  onCloseOptions = () => {\r\n    this.setState({\r\n      showingOptionsWindow: false,\r\n      selectedMultiple: {},\r\n    })\r\n  }\r\n\r\n  displayOptionsWindow() {\r\n    return <CustomInfoWindow position={this.state.activePosition} visible={this.state.showingOptionsWindow} onClose={this.onCloseOptions}>\r\n      <div>\r\n        <div><h5>Multiple positions are available at this location:</h5></div>\r\n        <div style={{display:\"grid\", gridRowGap:\"5px\"}}>\r\n          {this.displayOptions()};\r\n        </div>\r\n      </div>\r\n    </CustomInfoWindow>\r\n  }\r\n\r\n  sendToApplicationPage() {\r\n    window.location.assign('/apply/' + this.state.selected.id);\r\n  }\r\n\r\n  render() {\r\n    const { showingOptionsWindow, styling, showingInfoWindow, activePosition, selected, currentUser, currentJobPostSaved } = this.state;\r\n    return (\r\n      <Map\r\n        style={styling}\r\n        google={this.props.google}\r\n        zoom={8}\r\n        initialCenter={{ lat: 49, lng: -123 }}\r\n      >\r\n        {this.displayMarkers()}\r\n        {!showingInfoWindow && showingOptionsWindow && this.displayOptionsWindow()}\r\n        {showingInfoWindow && <CustomInfoWindow position={this.state.activePosition} visible={this.state.showingInfoWindow} onClose={this.onClose}>\r\n          <div>\r\n            <Card style={{ width: '18rem' }}>\r\n              <Card.Body>\r\n                <Card.Title>{this.state.selected.title}</Card.Title>\r\n                <Card.Subtitle className=\"mb-2 text-muted\">{this.state.selected.jobType}</Card.Subtitle>\r\n                <Card.Text>\r\n                  {this.state.selected.description}\r\n                </Card.Text>\r\n                {currentUser && <Button variant=\"primary\" onClick={() => this.sendToApplicationPage()}>\r\n                  Apply\r\n            </Button>}\r\n                {currentUser && !currentJobPostSaved && <Button variant=\"primary\" value=\"save\" id=\"savebtn\" onClick={this.handleSave}>\r\n                  Save\r\n            </Button>}\r\n                {currentUser && currentJobPostSaved && <Button variant=\"primary\" value=\"unsave\" id=\"unsavebtn\" onClick={this.handleSave}>\r\n                  Unsave\r\n            </Button>}\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </CustomInfoWindow>}\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyAAzxS6M98rJQ5DtHf89pIxHVZ2ISyln9U'\r\n})(MapContainer);","import React, { Component, Fragment } from \"react\";\r\nimport './jobBoard.css'\r\nimport JobPostDataService from \"../../services/jobPost.service\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport MapContainer from \"../GoogleMap/map.component\";\r\nimport { TwitterTimelineEmbed, TwitterShareButton } from 'react-twitter-embed';\r\n\r\n/**\r\n * Creates view job page component\r\n */\r\nclass ViewJobPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n    this.retrieveJobPosts = this.retrieveJobPosts.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveJobPost = this.setActiveJobPost.bind(this);\r\n    this.removeAllJobPosts = this.removeAllJobPosts.bind(this);\r\n    this.searchTitle = this.searchTitle.bind(this);\r\n    this.handleSave = this.handleSave.bind(this);\r\n    this.logOut = this.logOut.bind(this);\r\n    this.orgLogOut = this.orgLogOut.bind(this);\r\n    this.handleJobView = this.handleJobView.bind(this);\r\n\r\n    this.state = {\r\n      jobPosts: [],\r\n      currentJobPost: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\",\r\n      toggleHandler: true,\r\n      currentJobPostSaved: null,\r\n      currentUser: AuthService.getCurrentUser(),\r\n      currentOrgUser: AuthService.getCurrentOrgUser(),\r\n      currentView: \"1\"\r\n    };\r\n  }\r\n\r\n  /**\r\n   * When the page finishes loading, a list of job posts is retrieved\r\n   */\r\n  componentDidMount() {\r\n    this.retrieveJobPosts();\r\n  }\r\n\r\n  /**\r\n   * Sets the current searchTitle state to the value of the parameter passed to this function\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeSearchTitle(e) {\r\n    const searchTitle = e.target.value;\r\n    this.setState({\r\n      searchTitle: searchTitle\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles specific job viewing function\r\n   * \r\n   * @param {*} e \r\n   */\r\n  handleJobView(e) {\r\n    console.log(\"target value \" + e.target.value);\r\n    if (e.target.value === \"1\") {\r\n      this.setState({\r\n        currentView: e.target.value\r\n      })\r\n      console.log(\"list\");\r\n      console.log(this.state.currentView)\r\n    }\r\n    else {\r\n      this.setState({\r\n        currentView: e.target.value\r\n      })\r\n      console.log(\"map\");\r\n      console.log(this.state.currentView)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles saving of job post\r\n   * \r\n   * @param {*} e \r\n   */\r\n  handleSave(e) {\r\n    if (e.target.value === \"save\") {\r\n      JobPostDataService.saveHandle({ userId: this.state.currentUser.id, jobPostId: this.state.currentJobPost.id, save: true });\r\n      this.setState({ currentJobPostSaved: true });\r\n    }\r\n    else {\r\n      JobPostDataService.saveHandle({ userId: this.state.currentUser.id, jobPostId: this.state.currentJobPost.id, save: false });\r\n      this.setState({ currentJobPostSaved: false });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves a list of all jobs from the database\r\n   */\r\n  retrieveJobPosts() {\r\n\r\n    JobPostDataService.getAll()\r\n      .then(response => {\r\n        this.setState({\r\n          jobPosts: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Refreshes the job list by prompting another query to the database that retrieves all jobs\r\n   */\r\n  refreshList() {\r\n    this.retrieveJobPosts();\r\n    this.setState({\r\n      currentJobPost: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the state of the currently selected job post\r\n   * \r\n   * @param {*} jobPost \r\n   * @param {*} index \r\n   */\r\n  setActiveJobPost(jobPost, index) {\r\n    this.setState({\r\n      currentJobPost: jobPost,\r\n      currentIndex: index\r\n    });\r\n    if (this.state.currentUser) {\r\n      var data = {\r\n        userId: this.state.currentUser.id,\r\n        jobPostId: jobPost.id\r\n      };\r\n      console.log(data);\r\n      JobPostDataService.findSaved(data).then(res => {\r\n        console.log('res.data.found = ' + res.data.found);\r\n        this.setState({\r\n          currentJobPostSaved: res.data.found ? true : false,\r\n        })\r\n      })\r\n      console.log(\"saved? \" + this.state.currentJobPostSaved);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes all job posts\r\n   */\r\n  removeAllJobPosts() {\r\n    JobPostDataService.deleteAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieves list of jobs with a specified title from database\r\n   */\r\n  searchTitle() {\r\n    JobPostDataService.findByTitle(this.state.searchTitle)\r\n      .then(response => {\r\n        this.setState({\r\n          jobPosts: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Logs the current individual user out of the app\r\n   */\r\n  logOut() {\r\n    AuthService.logout();\r\n  }\r\n\r\n  /**\r\n   * Logs the current Organization user out of the app\r\n   */\r\n  orgLogOut() {\r\n    AuthService.orgLogout();\r\n  }\r\n\r\n  /**\r\n   * Renders view job page component\r\n   */\r\n  render() {\r\n    const { searchTitle, jobPosts, currentJobPost, currentIndex, currentUser, currentView } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <form id='searchbar'>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search by title\"\r\n            value={searchTitle}\r\n            onChange={this.onChangeSearchTitle}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn btn-outline-secondary\"\r\n              type=\"button\"\r\n              onClick={this.searchTitle}\r\n            >\r\n              Search\r\n                            </button>\r\n          </div>\r\n        </form>\r\n        <article id='jobboard'>\r\n          <div id='jobboardImage'>\r\n            <div id=\"job-list\" className=\"job-list\">\r\n              <div id=\"jobListHead\">\r\n                <h4>Job Posts</h4>\r\n                <ToggleButtonGroup type=\"radio\" name=\"jobViewOptions\" defaultValue={1}>\r\n                  <ToggleButton onClick={this.handleJobView} value={1}>List</ToggleButton>\r\n                  <ToggleButton onClick={this.handleJobView} value={2}>Map</ToggleButton>\r\n                </ToggleButtonGroup>\r\n              </div>\r\n              <div id=\"indJobList\">\r\n                {currentView === \"1\" && <ul className=\"list-group\">\r\n                  {jobPosts &&\r\n                    jobPosts.map((jobPost, index) => (\r\n                      <li\r\n                        className={\r\n                          \"list-group-item \" +\r\n                          (index === currentIndex ? \"active\" : \"\")\r\n                        }\r\n                        id={jobPost.title + jobPost.id}\r\n                        onClick={() => {\r\n                          if (this.state.toggleHandler) { // triggers open job post animation             \r\n                            this.setActiveJobPost(jobPost, index);\r\n                            this.state.toggleHandler = false;\r\n                            document.getElementById('job-list').classList.remove('job-list');\r\n                            document.getElementById('job-list').classList.add('job-list-clicked');\r\n                            document.getElementById('contentArea').classList.add('bgOpacity');\r\n                          } else { // revert back\r\n                            this.setActiveJobPost(\"\", \"\")\r\n                            this.state.toggleHandler = true;\r\n                            document.getElementById('job-list').classList.remove('job-list-clicked');\r\n                            document.getElementById('job-list').classList.add('job-list');\r\n                            document.getElementById('contentArea').classList.remove('bgOpacity');\r\n                          }\r\n                        }}\r\n                        key={index}\r\n                        style={{ color: 'black' }}>\r\n                        {jobPost.title}\r\n                      </li>\r\n                    ))}\r\n                </ul>}\r\n              </div>\r\n              {currentView === \"1\" && <div id=\"job-description-wrapper\">\r\n                {currentJobPost && (\r\n                  <div id='job-description'>\r\n                    <h4>Job Post</h4>\r\n                    <div>\r\n                      <label>\r\n                        <strong>Title:</strong>\r\n                      </label>{\" \"}\r\n                      {currentJobPost.title}\r\n                    </div>\r\n                    <div>\r\n                      <label>\r\n                        <strong>Description:</strong>\r\n                      </label>{\" \"}\r\n                      {currentJobPost.description}\r\n                    </div>\r\n                    <div>\r\n                      <label>\r\n                        <strong>Job Type:</strong>\r\n                      </label>{\" \"}\r\n                      {currentJobPost.jobType}\r\n                    </div>\r\n                    <div>\r\n                      <label>\r\n                        <strong>Hourly Rate:</strong>\r\n                      </label>{\" \"}\r\n                      {currentJobPost.rate}\r\n                    </div>\r\n                    <div>\r\n                      <label>\r\n                        <strong>Start Date:</strong>\r\n                      </label>{\" \"}\r\n                      {currentJobPost.startDate}\r\n                    </div>\r\n                    <div>\r\n                      <label>\r\n                        <strong>Contract Length:</strong>\r\n                      </label>{\" \"}\r\n                      {currentJobPost.contractLength}\r\n                    </div>\r\n                    {currentUser && <Link\r\n                      to={\"/apply/\" + currentJobPost.id}\r\n                      className=\"badge badge-success\">Apply</Link>}\r\n                    {currentUser && !this.state.currentJobPostSaved && <Button variant=\"info\" value=\"save\" onClick={this.handleSave}> Save </Button>}\r\n                    {currentUser && this.state.currentJobPostSaved && <Button variant=\"info\" value=\"unsave\" onClick={this.handleSave}> Unsave </Button>}\r\n                  </div>\r\n                )}\r\n              </div>}\r\n            </div>\r\n          </div>\r\n        </article>\r\n        <div id=\"map\" height=\"500px\" width=\"100%\">\r\n          {currentView === \"2\" && jobPosts &&\r\n            <MapContainer jobs={jobPosts} styling={{\r\n              width: '80%',\r\n              height: '250%',\r\n              margin: '5px 100px'\r\n            }} />}\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ViewJobPage;","import React, { Component, Fragment } from 'react';\r\nimport './jobBoard.css'\r\nimport JobPostDataService from \"../../services/jobPost.service\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, ToggleButton } from 'react-bootstrap';\r\nimport ViewJobPage from \"./ViewJobPage\";\r\n\r\n/**\r\n * Creates job board page component\r\n */\r\nclass JobBoardPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.logOut = this.logOut.bind(this);\r\n    this.orgLogOut = this.orgLogOut.bind(this);\r\n\r\n    this.state = {\r\n      currentUser: AuthService.getCurrentUser,\r\n      currentOrgUser: AuthService.getCurrentOrgUser\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets currentUser and currentOrgUser fields immediately\r\n   * upon loading\r\n   */\r\n  componentDidMount() {\r\n    const user = AuthService.getCurrentUser;\r\n    const orgUser = AuthService.getCurrentOrgUser;\r\n\r\n    if (user) {\r\n      this.setState({\r\n        currentUser: AuthService.getCurrentUser(),\r\n        currentOrgUser: AuthService.getCurrentOrgUser()\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs out individual (job-seeker) user account\r\n   */\r\n  logOut() {\r\n    AuthService.logout();\r\n  }\r\n\r\n  /**\r\n   * Logs out business user account\r\n   */\r\n  orgLogOut() {\r\n    AuthService.orgLogout();\r\n  }\r\n\r\n    /**\r\n     * Render job board page component\r\n     */\r\n    render() {\r\n      const {currentUser, currentOrgUser}=this.state;\r\n      \r\n        return ( \r\n          <div id=\"contentLayoutJobs\">\r\n            <div id=\"contentDiv\">\r\n              <div>\r\n                <section id=\"content\">\r\n                    <ul id=\"category\">\r\n                        <div id='currentPage'>\r\n                          <a href=\"/jobposts\">\r\n                            <li id=\"ex\">Job Posts</li>\r\n                          </a>\r\n                        </div>\r\n                    </ul>\r\n                    <ViewJobPage />\r\n                </section>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default JobBoardPage","import React, { Component } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport { isEmail } from \"validator\";\r\nimport \"../Layouts/ContentLayout.css\"\r\nimport \"./registration.css\"\r\n\r\nimport AuthService from \"../../services/auth.service\";\r\n\r\n/**\r\n * \r\n * @param {*} value form value\r\n */\r\nconst required = value => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        *Required field\r\n      </div>\r\n    );\r\n  }\r\n};\r\n/**\r\n * \r\n * @param {*} value form value\r\n */\r\nconst email = value => {\r\n  if (!isEmail(value)) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This is not a valid email.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n/**\r\n * \r\n * @param {*} value form value\r\n */\r\nconst vusername = value => {\r\n  if (value.length < 3 || value.length > 20) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The username must be between 3 and 20 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n/**\r\n * \r\n * @param {*} value form value\r\n */\r\nconst vpassword = value => {\r\n  if (value.length < 6 || value.length > 40) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The password must be between 6 and 40 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Component for registration.\r\n */\r\nexport default class Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleRegister = this.handleRegister.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangeEmail = this.onChangeEmail.bind(this);\r\n    this.onChangeFullName = this.onChangeFullName.bind(this);\r\n    this.onChangePhoneNumber = this.onChangePhoneNumber.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n    this.handleRegisterType = this.handleRegisterType.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      fullName: \"\",\r\n      phoneNumber: \"\",\r\n      successful: false,\r\n      message: \"\",\r\n      registerType: \"user\"\r\n    };\r\n  }\r\n  /**\r\n   * Handles form change event.\r\n   * \r\n   * @param {*} e event\r\n   */\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n  }\r\n  /**\r\n   * Handles form change event.\r\n   * \r\n   * @param {*} e event\r\n   */\r\n  onChangeEmail(e) {\r\n    this.setState({\r\n      email: e.target.value\r\n    });\r\n  }\r\n  /**\r\n   * Handles form change event.\r\n   * \r\n   * @param {*} e event\r\n   */\r\n  onChangeFullName(e) {\r\n    this.setState({\r\n      fullName: e.target.value\r\n    });\r\n  }\r\n  /**\r\n   * Handles form change event.\r\n   * \r\n   * @param {*} e event\r\n   */\r\n  onChangePhoneNumber(e) {\r\n    this.setState({\r\n      phoneNumber: e.target.value\r\n    });\r\n  }\r\n  /**\r\n   * Handles form change event.\r\n   * \r\n   * @param {*} e event\r\n   */\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  }\r\n  /**\r\n   * Handles form change event.\r\n   * \r\n   * @param {*} e event\r\n   */\r\n  handleRegisterType(e) {\r\n    this.setState({\r\n      registerType: e.target.value\r\n    });\r\n    console.log(e.target.value);\r\n  }\r\n  /**\r\n   * Initializes states on component mount.\r\n   * \r\n   * @param {*} message message\r\n   * @param {*} successful success state\r\n   */\r\n  componentDidMount(message, successful) {\r\n    this.setState({\r\n      message: message,\r\n      successful: successful\r\n    });\r\n  }\r\n  /**\r\n   * Handles registration process.\r\n   * \r\n   * @param {*} e event\r\n   */\r\n  handleRegister(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      message: \"\",\r\n      successful: false\r\n    });\r\n\r\n    this.form.validateAll();\r\n    console.log(this.state.registerType);\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      if (this.state.registerType === \"user\") {\r\n        AuthService.register(\r\n          this.state.username,\r\n          this.state.email,\r\n          this.state.password,\r\n          this.state.fullName,\r\n          this.state.phoneNumber\r\n        ).then(\r\n          response => {\r\n            this.componentDidMount(response.data.message, true);\r\n          },\r\n          error => {\r\n            const resMessage =\r\n              (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n              error.message ||\r\n              error.toString();\r\n\r\n            this.setState({\r\n              successful: false,\r\n              message: resMessage\r\n            });\r\n          }\r\n        );\r\n      }\r\n      else {\r\n        AuthService.orgRegister(\r\n          this.state.username,\r\n          this.state.email,\r\n          this.state.password\r\n        ).then(\r\n          response => {\r\n            this.componentDidMount(response.data.message, true);\r\n          },\r\n          error => {\r\n            const resMessage =\r\n              (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n              error.message ||\r\n              error.toString();\r\n\r\n            this.setState({\r\n              successful: false,\r\n              message: resMessage\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const radioBtnStyle = {\r\n      marginLeft: '5%'\r\n    }\r\n\r\n    return (\r\n      <div id=\"contentLayoutRegister\">\r\n        <div id=\"contentDivRegister\">\r\n          <div>\r\n            <div id=\"registration-background\">\r\n              <Form\r\n                onSubmit={this.handleRegister}\r\n                ref={c => {\r\n                  this.form = c;\r\n                }}\r\n              >\r\n                {!this.state.successful && (\r\n                  <div id=\"addJobAreaRegister\">\r\n                    <div id=\"toggleDiv\" style={{ display: 'flex', justifyContent: 'center' }}>\r\n                      <div>\r\n                        <label class=\"btn btn-secondary\">\r\n                          <input class=\"m-2\" type=\"radio\" name=\"options\" id=\"user\" autocomplete=\"off\" value=\"user\" checked={this.state.registerType === \"user\"} onChange={this.handleRegisterType} />Register As Individual User</label>\r\n                      </div>\r\n                      <div style={radioBtnStyle}>\r\n                        <label class=\"btn btn-secondary\">\r\n                          <input class=\"m-2\" type=\"radio\" name=\"options\" id=\"orgUser\" autocomplete=\"off\" value=\"orgUser\" checked={this.state.registerType === \"orgUser\"} onChange={this.handleRegisterType} />Register As Organization</label>\r\n                      </div>\r\n                    </div>\r\n                    <div id=\"form1\" className=\"form-group\">\r\n                      <label htmlFor=\"username\">Username</label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"username\"\r\n                        value={this.state.username}\r\n                        onChange={this.onChangeUsername}\r\n                        validations={[required, vusername]}\r\n                      />\r\n                    </div>\r\n\r\n                    <div id=\"form2\" className=\"form-group\">\r\n                      <label htmlFor=\"fullName\">Full Name</label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"fullName\"\r\n                        value={this.state.fullName}\r\n                        onChange={this.onChangeFullName}\r\n                      />\r\n                    </div>\r\n                    <div id=\"form3\" className=\"form-group\">\r\n                      <label htmlFor=\"phoneNumber\">Phone Number</label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"phoneNumber\"\r\n                        value={this.state.phoneNumber}\r\n                        onChange={this.onChangePhoneNumber}\r\n                      />\r\n                    </div>\r\n\r\n                    <div id=\"form4\" className=\"form-group\">\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        value={this.state.email}\r\n                        onChange={this.onChangeEmail}\r\n                        validations={[required, email]}\r\n                      />\r\n                    </div>\r\n\r\n                    <div id=\"form5\" className=\"form-group\">\r\n                      <label htmlFor=\"password\">Password</label>\r\n                      <Input\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        name=\"password\"\r\n                        value={this.state.password}\r\n                        onChange={this.onChangePassword}\r\n                        validations={[required, vpassword]}\r\n                      />\r\n                    </div>\r\n\r\n                    <div id=\"signup\" className=\"form-group\">\r\n                      <button className=\"btn btn-primary btn-block\" style={{ marginTop: '30px' }}>Sign Up</button>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {this.state.message && (\r\n                  <div className=\"\">\r\n                    <div\r\n                      className={\r\n                        this.state.successful\r\n                          ? \"alert alert-success\"\r\n                          : \"alert alert-danger\"\r\n                      }\r\n                      role=\"alert\"\r\n                    >\r\n                      {this.state.message}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <CheckButton\r\n                  style={{ display: \"none\" }}\r\n                  ref={c => {\r\n                    this.checkBtn = c;\r\n                  }}\r\n                />\r\n\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport { isEmail } from \"validator\";\r\nimport \"bootstrap/dist/js/bootstrap.js\";\r\nimport \"../Layouts/ContentLayout.css\";\r\nimport \"./login.css\";\r\n\r\n\r\n\r\nconst loginPosition = {\r\n  position: 'absolute',\r\n  top: '100px',\r\n  bottom: '100px',\r\n  \r\n}\r\n\r\nconst required = value => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        *Required field\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst email = value => {\r\n  if (!isEmail(value)) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This is not a valid email.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nexport default class logIn extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n    this.onChangeEmail = this.onChangeEmail.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n    this.onChangeLoginType = this.onChangeLoginType.bind(this);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      loading: false,\r\n      message: \"\",\r\n      loginType: \"user\"\r\n    };\r\n  }\r\n\r\n  onChangeEmail(e) {\r\n    this.setState({\r\n      email: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangeLoginType(e) {\r\n    this.setState({\r\n      loginType: e.target.value\r\n    });\r\n    console.log(\"state: \"+this.state.loginType);\r\n    console.log(\"e: \"+e.target.value);\r\n    console.log(\"test: \"+this);\r\n  }\r\n  handleLogin(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      message: \"\",\r\n      loading: true\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      if (this.state.loginType === \"user\") {\r\n        AuthService.login(this.state.email, this.state.password).then(\r\n          () => {\r\n            this.props.history.push(\"/\");\r\n            window.location.reload();\r\n          },\r\n          error => {\r\n            const resMessage =\r\n              (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n              error.message ||\r\n              error.toString();\r\n\r\n            this.setState({\r\n              loading: false,\r\n              message: resMessage\r\n            });\r\n          }\r\n        );\r\n      }\r\n      else {\r\n        AuthService.orgLogin(this.state.email, this.state.password).then(\r\n          () => {\r\n            this.props.history.push(\"/orgJobBoard\");\r\n            window.location.reload();\r\n          },\r\n          error => {\r\n            const resMessage =\r\n              (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n              error.message ||\r\n              error.toString();\r\n\r\n            this.setState({\r\n              loading: false,\r\n              message: resMessage\r\n            });\r\n          }\r\n        );\r\n      }\r\n    } else {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const radioBtnStyle = {\r\n      marginLeft: '5%'\r\n    }\r\n\r\n    return (\r\n      <div id=\"contentLayoutRegister\">\r\n        <div id=\"contentDivRegister\">\r\n        <div>\r\n        <div id=\"login-background\">\r\n          <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <div >\r\n              <label class=\"btn btn-secondary\">\r\n              <input class=\"m-2\" type=\"radio\" name=\"options\" id=\"user\" autoComplete=\"off\" value=\"user\" checked={this.state.loginType===\"user\"} onChange={this.onChangeLoginType} />Log In As Individual User</label>\r\n            </div>\r\n            <div style={radioBtnStyle}>\r\n              <label class=\"btn btn-secondary\">\r\n              <input class=\"m-2\" type=\"radio\" name=\"options\" id=\"orgUser\" autoComplete=\"off\" value=\"orgUser\" checked={this.state.loginType===\"orgUser\"} onChange={this.onChangeLoginType} />Log In As Organization</label>\r\n            </div>\r\n          </div>\r\n          <Form\r\n            onSubmit={this.handleLogin}\r\n            ref={c => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"email\"\r\n                value={this.state.email}\r\n                onChange={this.onChangeEmail}\r\n                validations={[email]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                name=\"password\"\r\n                value={this.state.password}\r\n                onChange={this.onChangePassword}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button\r\n                className=\"btn btn-primary btn-block\"\r\n                disabled={this.state.loading}\r\n                style={{margin:'0px'}}\r\n              >\r\n                {this.state.loading && (\r\n                  <span className=\"spinner-border spinner-border-sm\"></span>\r\n                )}\r\n                <span>Login</span>\r\n              </button>\r\n            </div>\r\n\r\n            {this.state.message && (\r\n              <div className=\"form-group\">\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                  {this.state.message}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={c => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n          \r\n          </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './Bodyframe.css'\r\nimport backgroundFrame from \"../../img/bg.png\"\r\nimport JobPostDataService from \"../../services/jobPost.service\";\r\n\r\n\r\n/**\r\n * Creates main body component\r\n */\r\nclass mainBody extends Component {\r\n    constructor() {\r\n        super()\r\n        this.retrieveJobPosts = this.retrieveJobPosts.bind(this);\r\n\r\n        this.state = {\r\n            jobPosts: [],\r\n            currentIndex: -1\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prompts the database for a list of jobs when the page loads\r\n     */\r\n    componentDidMount() {\r\n        this.retrieveJobPosts();\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of all job posts\r\n     */\r\n    retrieveJobPosts() {\r\n        JobPostDataService.getAll()\r\n            .then(response => {\r\n                this.setState({\r\n                    jobPosts: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Renders main body component\r\n     */\r\n    render() {\r\n        const { jobPosts, currentIndex } = this.state;\r\n\r\n        return (\r\n            <main id=\"contentArea\">\r\n                <section id='ancement'>\r\n                    <div class='animated-text'>\r\n                        <div class='line'>Help your community in a paid or volunteer position</div>\r\n                        <div class='line'>VGH looking to fill dozens of temporary positions</div>\r\n                        <div class='line'>Drivers needed for community grocery delivery services</div>\r\n                        <div class='line'>BC currently has 2,446 confirmed COVID-19 cases</div>\r\n                        <div class='line'>Museums, retail, salons, and other services reopen</div>\r\n                        <div class='line'>Local businesses adjusting to Phase 2 opening restrictions</div>\r\n                    </div>\r\n                </section>\r\n                <section id=\"bgImg\">\r\n                    <img id=\"backgroundImg\" src={backgroundFrame} />\r\n                </section>\r\n                <section id=\"bottomtext\">\r\n                    <div>\r\n                        <ul id=\"bottom-display\">\r\n                            {jobPosts &&\r\n                                jobPosts.map((jobPost, index) => (\r\n                                    <li id={jobPost.id} key={index} style={{ color: 'black' }}>\r\n                                        {jobPost.title}\r\n                                    </li>\r\n                                ))}\r\n                        </ul>\r\n                    </div>\r\n                </section>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default mainBody;\r\n","import React, { Component, Fragment } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst footerStyle = {\r\n    backgroundColor: '#2743A5',\r\n    position: 'absolute',\r\n    width: '100%',\r\n    bottom: '0px',\r\n    height: '50px',\r\n    zIndex: '2',\r\n    marginBottom:'0px',\r\n}\r\n\r\nconst fontStyle = {\r\n    position: 'absolute',\r\n    color: 'white',\r\n    paddingBottom:'0px',\r\n    verticalAlign:'center',\r\n    bottom:'12.5px'\r\n}\r\n\r\n/** Footer page component */\r\nfunction Footer () {\r\n    return (\r\n        <Fragment>\r\n            <footer style={footerStyle} class=\"page-footer font-small blue\">\r\n                <span style={fontStyle} class=\"footer-copyright text-left\">\r\n                    © 2020 Copyright: Help!\r\n                </span>\r\n            </footer>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Footer;","export default function authHeader() {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n  \r\n    if (user && user.accessToken) {\r\n      // for Node.js Express back-end\r\n      return { 'x-access-token': user.accessToken };\r\n    } else {\r\n      return {};\r\n    }\r\n  }","import axios from 'axios';\nimport http from \"../http-common\";\nimport authHeader from './auth-header';\n\n// const API_URL = \"http://localhost:8081/api/test/\";\nconst API_URL = \"https://helpservices.herokuapp.com/api/test/\";\n\nclass UserService {\n  getPublicContent() {\n    return axios.get(API_URL + 'all');\n  }\n\n  getUserBoard() {\n    return axios.get(API_URL + 'user', { headers: authHeader() });\n  }\n\n  findOneUser(id) {\n    return http.get(`/users/${id}`);\n  }\n\n  updateUser(id, phoneNumber, email, fullName) {\n    return http.put(`/users/${id}/${phoneNumber}/${email}/${fullName}`)\n  }\n}\n\nexport default new UserService();","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport UserDataService from \"../../services/user.service\";\r\nimport \"../Layouts/ContentLayout.css\";\r\nimport black_background from \"../../img/profile_bg.png\";\r\nimport \"./profile.css\";\r\nimport HelpLogo from \"../../img/logo.jpg\";\r\n\r\n\r\nexport default class Profile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.retrieveUserInfo = this.retrieveUserInfo.bind(this);\r\n\r\n    this.state = {\r\n      currentUser: AuthService.getCurrentUser()\r\n    };\r\n  }\r\n\r\n  /** Call retrieveUserInfo method */\r\n  componentDidMount() {\r\n    this.retrieveUserInfo();\r\n  }\r\n\r\n  retrieveUserInfo() {\r\n\r\n    console.log(this.state.currentUser.id);\r\n\r\n    /** Retrieves all current user data */\r\n    UserDataService.findOneUser(this.state.currentUser.id)\r\n        .then(response => {\r\n            this.setState({\r\n                currentUser: response.data\r\n            });\r\n            console.log(response.data);\r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n        });\r\n}\r\n\r\n  render() {\r\n    const { currentUser} = this.state;\r\n\r\n    return (\r\n      <div id=\"profile-container\">\r\n        <div id=\"liquidHeading\">\r\n          <p id=\"myProfile\">My Profile</p>\r\n        </div>\r\n        <div id=\"contentProfile\">\r\n          <div id=\"userProfileBackground\">\r\n            <img src={HelpLogo} id=\"profileImg\"></img>       \r\n            <div id=\"main-info\">\r\n              <p><strong>Name: </strong>{currentUser.fullName}</p>\r\n              <p><strong>E-mail: </strong>{currentUser.email}</p>\r\n              <p><strong>Phone Number: </strong>{currentUser.phoneNumber}</p>\r\n              <Link\r\n                          to={\"/editUserProfile/\"}\r\n                          className=\"badge badge-warning\"\r\n                          id='edit-btn'\r\n                        >\r\n                          Edit\r\n                                    </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","/**\r\n * A watered down version of the classic Asteroid game. Used https://github.com/chriz001/Reacteroids as a tutorial for using context and also for its random number generator functions and collision function. Remade game logic and virus(asteroid) logic. \r\n * \r\n * This class generates a Beatle which will be controlled by the player in the Driver class. The Beatle has a set movement speed and a set radius.\r\n */\r\n\r\n\r\nexport default class Beatle {\r\n    /**\r\n     * Constructs a Beatle object.\r\n     * \r\n     * @param {*} args \r\n     */\r\n    constructor(args) {\r\n        this.position = args.position;\r\n        this.radius = 10;\r\n        this.create = args.create;\r\n        this.onDie = args.onDie;\r\n        this.shape = new Image();\r\n        this.shape.src = \"./pm.png\";\r\n        this.delete=false;\r\n    }\r\n    /**\r\n     * Destroys the object.\r\n     */\r\n    destroy() {\r\n        this.delete = true;\r\n        this.onDie();\r\n    }\r\n    render(state) {\r\n        if (state.keys.up) {\r\n            this.position.y -= 3;\r\n        }\r\n        if (state.keys.down) {\r\n            this.position.y += 3;\r\n        }\r\n        if (state.keys.left) {\r\n            this.position.x -= 3;\r\n        }\r\n        if (state.keys.right) {\r\n            this.position.x += 3;\r\n        }\r\n\r\n        if(this.position.x > state.screen.width) this.position.x = 0;\r\n        else if(this.position.x < 0) this.position.x = state.screen.width;\r\n        if(this.position.y > state.screen.height*0.8) this.position.y = 50;\r\n        else if(this.position.y < 50) this.position.y = state.screen.height*0.8;\r\n\r\n        const context = state.context;\r\n        context.save();\r\n        context.translate(this.position.x, this.position.y);\r\n        context.rotate(this.rotation * Math.PI / 180);\r\n        context.strokeStyle = '#000000';\r\n        context.fillStyle = '#2743A5';\r\n        context.lineWidth = 2;\r\n        context.beginPath();\r\n        context.moveTo(0,15);\r\n        context.lineTo(10,10);\r\n        context.lineTo(0,-15);\r\n        context.lineTo(-10,10);\r\n        context.closePath();\r\n        context.fill();\r\n        context.stroke();\r\n        context.restore();\r\n    }\r\n}","/**\r\n * Random Number between 2 numbers\r\n */\r\nexport function randomNumBetween(min, max) {\r\n    return Math.random() * (max - min + 1) + min;\r\n};\r\n\r\n/**\r\n * Random Number between 2 numbers excluding a certain range\r\n */\r\nexport function randomNumBetweenExcluding(min, max, exMin, exMax) {\r\n    let random = randomNumBetween(min, max);\r\n    while (random > exMin && random < exMax) {\r\n        random = Math.random() * (max - min + 1) + min;\r\n    }\r\n    return random;\r\n};\r\n","/**\r\n * A watered down version of the classic Asteroid game. Used https://github.com/chriz001/Reacteroids as a tutorial for using context and also for its random number generator functions and collision function. Remade game logic and virus(asteroid) logic. \r\n *  \r\n * This Class generates a Virus object that's a circular shape with randomized velocity, randomized and decreasing radius, life span and a score based on its initial radius and velocity.\r\n */\r\n\r\nimport { randomNumBetween } from './helpers';\r\n\r\nexport default class Virus {\r\n    /**\r\n     * Constructs Virus object.\r\n     * \r\n     * @param {*} args \r\n     */\r\n    constructor(args) {\r\n        this.position = args.position;\r\n        this.velocity = {\r\n            x: randomNumBetween(-0.5, 0.5),\r\n            y: randomNumBetween(-0.5, 0.5)\r\n        }\r\n        this.radius = randomNumBetween(15, 50);\r\n        this.deathRadius = 10;\r\n        this.lifeSpan = randomNumBetween(200, 4000);\r\n        this.score = this.radius + this.lifeSpan / 10;\r\n        this.create = args.create;\r\n        this.addScore = args.addScore;\r\n        this.delete = false;\r\n    }\r\n    /**\r\n     * Destroys the object.\r\n     */\r\n    destroy() {\r\n        this.delete = true;\r\n        this.addScore(this.score);\r\n    }\r\n\r\n    render(state) {\r\n        this.position.x += this.velocity.x;\r\n        this.position.y += this.velocity.y;\r\n\r\n        this.radius -= 0.1;\r\n        this.lifeSpan -= 0.5;\r\n        if (this.radius < this.deathRadius || this.lifeSpan-- < 0) {\r\n            this.destroy();\r\n        }\r\n\r\n        if (this.position.x > state.screen.width + this.radius) this.position.x = -this.radius;\r\n        else if (this.position.x < -this.radius) this.position.x = state.screen.width + this.radius;\r\n        if (this.position.y > state.screen.height * 0.8 - this.radius) this.position.y = 50 - this.radius;\r\n        else if (this.position.y < 50 - this.radius) this.position.y = state.screen.height * 0.8 + this.radius;\r\n\r\n        const context = state.context;\r\n        context.save();\r\n        context.beginPath();\r\n        context.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\r\n        context.stroke();\r\n        context.restore();\r\n    }\r\n}","/**\r\n * A watered down version of the classic Asteroid game. Used https://github.com/chriz001/Reacteroids as a tutorial for using context and also for its random number generator functions and collision function. Remade game logic and virus(asteroid) logic. \r\n *  \r\n * The Driver class for the easter egg asteroid game. Generates a Beatle, a population of Viruses, adds keyboard listerners to enable player control of the Beatle, simulates collision physics and keeps the scores.\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport Beatle from './Beatle';\r\nimport Virus from './Virus';\r\nimport { randomNumBetweenExcluding, randomNumBetween } from './helpers';\r\nimport \"./style.css\";\r\nimport mp3_file from './help.mp3';\r\n\r\nconst KEY = {\r\n    LEFT: 37,\r\n    RIGHT: 39,\r\n    UP: 38,\r\n    DOWN: 40,\r\n    A: 65,\r\n    D: 68,\r\n    W: 87,\r\n    S: 83,\r\n\r\n    SPACE: 32\r\n};\r\n\r\nexport class EasterEgg extends Component {\r\n    /**\r\n     * Constructs the Driver class.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            screen: {\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n                ratio: window.devicePixelRatio || 1,\r\n            },\r\n            context: null,\r\n            keys: {\r\n                left: 0,\r\n                right: 0,\r\n                up: 0,\r\n                down: 0,\r\n                space: 0,\r\n            },\r\n            virusCount: 10,\r\n            currentScore: 0,\r\n            topScore: localStorage['topscore'] || 0,\r\n            inGame: false\r\n        }\r\n        this.beatle = [];\r\n        this.virus = [];\r\n    }\r\n    /**\r\n     * Handles window resizing.\r\n     * \r\n     * @param {*} value \r\n     * @param {*} e \r\n     */\r\n    handleResize(value, e) {\r\n        this.setState({\r\n            screen: {\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n                ratio: window.devicePixelRatio || 1,\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Handles keyboard inputs.\r\n     * \r\n     * @param {*} value key value\r\n     * @param {*} e event\r\n     */\r\n    handleKeys(value, e) {\r\n        let keys = this.state.keys;\r\n        if (e.keyCode === KEY.LEFT || e.keyCode === KEY.A) keys.left = value;\r\n        if (e.keyCode === KEY.RIGHT || e.keyCode === KEY.D) keys.right = value;\r\n        if (e.keyCode === KEY.UP || e.keyCode === KEY.W) keys.up = value;\r\n        if (e.keyCode === KEY.DOWN || e.keyCode === KEY.S) keys.down = value;\r\n        if (e.keyCode === KEY.SPACE) keys.space = value;\r\n        this.setState({\r\n            keys: keys\r\n        });\r\n    }\r\n    /**\r\n     * Initializes event listeners, context, animationframe and states on component mount.\r\n     */\r\n    componentDidMount() {\r\n        window.addEventListener('keyup', this.handleKeys.bind(this, false));\r\n        window.addEventListener('keydown', this.handleKeys.bind(this, true));\r\n        window.addEventListener('resize', this.handleResize.bind(this, false));\r\n        document.getElementById(\"mp3\").audio = 0.5;\r\n        const context = this.refs.canvas.getContext('2d');\r\n        this.setState({ context: context });\r\n        requestAnimationFrame(() => { this.update() });\r\n    }\r\n    /**\r\n     * Removes event listeners on component dismount.\r\n     */\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keyup', this.handleKeys);\r\n        window.removeEventListener('keydown', this.handleKeys);\r\n        window.removeEventListener('resize', this.handleResize);\r\n    }\r\n    /**\r\n     * Updates states for each frame.\r\n     */\r\n    update() {\r\n        const context = this.state.context;\r\n        context.clearRect(0, 0, this.state.screen.width, this.state.screen.height * 0.8);\r\n        const keys = this.state.keys;\r\n        const beatle = this.beatle[0];\r\n\r\n        context.save();\r\n        context.scale(this.state.screen.ratio, this.state.screen.ratio);\r\n\r\n        if (this.virus.length < randomNumBetween(5, 10) && this.virus.length < 25) {\r\n            let count = randomNumBetween(5, 10);\r\n            this.setState({ virusCount: count });\r\n            this.generateVirus(count);\r\n        }\r\n\r\n        this.checkCollisionsWith(this.beatle, this.virus);\r\n\r\n        this.updateObjects(this.beatle, 'beatle');\r\n        this.updateObjects(this.virus, 'virus');\r\n\r\n        context.restore();\r\n\r\n        requestAnimationFrame(() => { this.update() });\r\n    }\r\n    /**\r\n     * Adds scores.\r\n     * \r\n     * @param {*} points scores\r\n     */\r\n    addScore(points) {\r\n        if (this.state.inGame) {\r\n            this.setState({\r\n                currentScore: Math.round(this.state.currentScore + points),\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Constructs objects and initializes game states.\r\n     */\r\n    startGame() {\r\n        this.setState({\r\n            inGame: true,\r\n            currentScore: 0,\r\n        });\r\n\r\n        let beatle = new Beatle({\r\n            position: {\r\n                x: this.state.screen.width / 2,\r\n                y: this.state.screen.height / 2\r\n            },\r\n            create: this.createObject.bind(this),\r\n            onDie: this.gameOver.bind(this)\r\n        });\r\n        this.createObject(beatle, 'beatle');\r\n\r\n        this.virus = [];\r\n        this.generateVirus(this.state.virusCount);\r\n    }\r\n    /**\r\n     * Sets states for gameover.\r\n     */\r\n    gameOver() {\r\n        this.setState({\r\n            inGame: false,\r\n        });\r\n\r\n        // Replace top score\r\n        if (this.state.currentScore > this.state.topScore) {\r\n            this.setState({\r\n                topScore: Math.round(this.state.currentScore),\r\n            });\r\n            localStorage['topscore'] = this.state.currentScore;\r\n        }\r\n    }\r\n    /**\r\n     * Generates population of virus.\r\n     * \r\n     * @param {*} count virus population to be generated\r\n     */\r\n    generateVirus(count) {\r\n        let virus = [];\r\n        let beatle = this.beatle[0];\r\n        for (let i = 0; i < count; i++) {\r\n            let newX;\r\n            let newY;\r\n            if (this.inGame) {\r\n                newX = randomNumBetweenExcluding(0, this.state.screen.width, beatle.position.x - 100, beatle.position.x + 100);\r\n                newY = randomNumBetweenExcluding(50, this.state.screen.height * 0.8, beatle.position.y - 60, beatle.position.y + 60);\r\n            }\r\n            else {\r\n                newX = randomNumBetween(0, this.state.screen.width);\r\n                newY = randomNumBetween(50, this.state.screen.height * 0.8);\r\n            }\r\n\r\n            let virus = new Virus({\r\n                position: {\r\n                    x: newX,\r\n                    y: newY\r\n                },\r\n                create: this.createObject.bind(this),\r\n                addScore: this.addScore.bind(this)\r\n            });\r\n            this.createObject(virus, 'virus');\r\n        }\r\n    }\r\n    /**\r\n     * Adds object to state.\r\n     * \r\n     * @param {*} item item\r\n     * @param {*} group group\r\n     */\r\n    createObject(item, group) {\r\n        this[group].push(item);\r\n    }\r\n    /**\r\n     * Updates all in-game objects.\r\n     * \r\n     * @param {*} items items\r\n     * @param {*} group group\r\n     */\r\n    updateObjects(items, group) {\r\n        let index = 0;\r\n        for (let item of items) {\r\n            if (item.delete) {\r\n                this[group].splice(index, 1);\r\n            } else {\r\n                items[index].render(this.state);\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n    /**\r\n     * Checks collisions between two group of items.\r\n     * \r\n     * @param {*} items1 group of items\r\n     * @param {*} items2 group of items\r\n     */\r\n    checkCollisionsWith(items1, items2) {\r\n        var a = items1.length - 1;\r\n        var b;\r\n        for (a; a > -1; --a) {\r\n            b = items2.length - 1;\r\n            for (b; b > -1; --b) {\r\n                var item1 = items1[a];\r\n                var item2 = items2[b];\r\n                if (this.checkCollision(item1, item2)) {\r\n                    item1.destroy();\r\n                    item2.destroy();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Checks collision between two objects.\r\n     * \r\n     * @param {*} obj1 object\r\n     * @param {*} obj2 object\r\n     */\r\n    checkCollision(obj1, obj2) {\r\n        var vx = obj1.position.x - obj2.position.x;\r\n        var vy = obj1.position.y - obj2.position.y;\r\n        var length = Math.sqrt(vx * vx + vy * vy);\r\n        if (length < obj1.radius + obj2.radius && !obj1.delete && !obj2.delete) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        let endgame;\r\n        let message;\r\n        if (this.state.currentScore >= this.state.topScore) {\r\n            message = this.state.currentScore + ' Points. New top score!';\r\n        } else {\r\n            message = this.state.currentScore + ' Points!'\r\n        }\r\n\r\n        if (!this.state.inGame) {\r\n            endgame = (\r\n                <div class=\"endgame\">\r\n                    <div><h2>{message}</h2></div>\r\n                    <div><button id=\"startBtn\"\r\n                        onClick={this.startGame.bind(this)}>\r\n                        Start again?\r\n              </button></div>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <audio id=\"mp3\" src={mp3_file} autoPlay loop />\r\n                <div id=\"ee\">\r\n                    <div id=\"msg\">\r\n                        <div id=\"endgame\">\r\n                            {endgame}\r\n                        </div>\r\n                        <div id=\"scores\">\r\n                            <span className=\"score current-score\" >Score: {this.state.currentScore}</span>\r\n                            <span className=\"score top-score\" >Top Score: {this.state.topScore}</span>\r\n                        </div>\r\n                        <div>\r\n                            <span className=\"controls\" >\r\n                                Move with [A][S][W][D] or [←][↑][↓][→]<br />\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <canvas ref=\"canvas\"\r\n                        width={this.state.screen.width * this.state.screen.ratio}\r\n                        height={this.state.screen.height * 0.8 * this.state.screen.ratio}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport './AboutUs.css'\r\nimport HelpLogo from '../../img/logo.jpg'\r\nimport chase from '../../img/chase.png'\r\nimport Catepillar from '../../img/catepillar.jpg'\r\nimport farmer from '../../img/farmer.JPG'\r\nimport beach from '../../img/beach.png'\r\nimport $ from 'jquery';\r\nimport { EasterEgg } from \"../EasterEgg/EasterEgg\";\r\n\r\n\r\n/**\r\n * About Us page component\r\n */\r\nexport default class AboutUs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.eggHandle = this.eggHandle.bind(this);\r\n\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    /** Removes the main content of about us page */\r\n    eggHandle() {\r\n        if (this.state.count >= 6) {\r\n            $('#aboutUs').hide();\r\n        }\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        })\r\n        console.log(this.state.count);\r\n\r\n    }\r\n    render() {\r\n        const { count } = this.state;\r\n        return (\r\n            <div>\r\n                {count >= 7 && <EasterEgg></EasterEgg>}\r\n                <div id=\"aboutUs\">\r\n                    <div id=\"aboutDiv\">\r\n                        <div id=\"headDiv\">\r\n                            <h2 id=\"aboutHead\">About the help! team:</h2>\r\n                            <p id=\"aboutPara\">Covid-19 pandemic has brought many challenges to people's lives and we are currently living in a time where we need each other's help more than ever. We, the <button onClick={this.eggHandle}>help!</button> app team, have recognized this issue and want to aid society by connecting people who can help each other. In our help! app, people will be able to post and apply for positions related to solving the problems that are caused by the pandemic.</p>\r\n                        </div>\r\n                        <div id=\"introductions\">\r\n                            <div class=\"items\" id=\"itemOne\">\r\n                                <div class=\"name-container\">\r\n                                    <p class=\"names\">Maria Davis</p>\r\n                                </div>\r\n                                <p class=\"selfIntroduction\"><span>I am a second term student in BCIT's CST program. I love designing apps to bring people together and make life easier. I hope help! assists our communities in overcoming the COVID-19 crisis.</span></p>\r\n                                <img class=\"selfImg\" src={beach}></img>\r\n                            </div>\r\n                            <div class=\"items\" id=\"itemTwo\">\r\n                                <div class=\"name-container\">\r\n                                    <p class=\"names\">Chase Lu</p>\r\n                                </div>\r\n                                <p class=\"selfIntroduction\"><span>I am a second term student in BCIT's CST program. I love designing apps to bring people together and make life easier. I hope help! assists our communities in overcoming the COVID-19 crisis.</span></p>\r\n                                <img class=\"selfImg\" src={chase}></img>\r\n                            </div>\r\n                            <div class=\"items\" id=\"itemThree\">\r\n                                <div class=\"name-container\">\r\n                                    <p class=\"names\">Geun Uoo Kim</p>\r\n                                </div>\r\n                                <p class=\"selfIntroduction\"><span>I started BCIT CST program in Winter 2020, and I chose this program because technology has always been my foremost interest. I also like to go hiking and chill.</span></p>\r\n                                <img class=\"selfImg\" src={farmer}></img>\r\n                            </div>\r\n                            <div class=\"items\" id=\"itemFour\">\r\n                                <div class=\"name-container\">\r\n                                    <p id=\"ethan\" class=\"names\">Ethan Sadowski</p>\r\n                                </div>\r\n                                <p class=\"selfIntroduction\"><span>I am a first semester student in BCIT's CST Program, I chose to enroll at BCIT because I have always had an interest in computing and I wanted to gain some more applied skills.</span></p>\r\n                                <img class=\"selfImg\" src={Catepillar}></img>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component, Fragment } from \"react\";\r\nimport '../JobBoardPage/jobBoard.css'\r\nimport JobPostDataService from \"../../services/jobPost.service\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport MapContainer from \"../GoogleMap/map.component\";\r\n\r\n/**\r\n * Creates saved job page component\r\n */\r\nclass SavedJobs extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n    this.retrieveJobPosts = this.retrieveJobPosts.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveJobPost = this.setActiveJobPost.bind(this);\r\n    this.removeAllJobPosts = this.removeAllJobPosts.bind(this);\r\n    this.searchTitle = this.searchTitle.bind(this);\r\n    this.handleSave = this.handleSave.bind(this);\r\n    this.logOut = this.logOut.bind(this);\r\n    this.orgLogOut = this.orgLogOut.bind(this);\r\n    this.handleJobView = this.handleJobView.bind(this);\r\n\r\n    this.state = {\r\n      jobPosts: [],\r\n      currentJobPost: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\",\r\n      toggleHandler: true,\r\n      currentJobPostSaved: null,\r\n      currentUser: AuthService.getCurrentUser(),\r\n      currentView: \"1\"\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calls function to retrieve saved job posts, immediately\r\n   */\r\n  componentDidMount() {\r\n    this.retrieveJobPosts();\r\n  }\r\n\r\n  /**\r\n   * Updates current text to search by title\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeSearchTitle(e) {\r\n    const searchTitle = e.target.value;\r\n\r\n    this.setState({\r\n      searchTitle: searchTitle\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles view job feature\r\n   * \r\n   * @param {*} e \r\n   */\r\n  handleJobView(e) {\r\n    console.log(\"target value \" + e.target.value);\r\n    if (e.target.value === \"1\") {\r\n      this.setState({\r\n        currentView: e.target.value\r\n      })\r\n      console.log(\"list\");\r\n      console.log(this.state.currentView)\r\n    }\r\n    else {\r\n      this.setState({\r\n        currentView: e.target.value\r\n      })\r\n      console.log(\"map\");\r\n      console.log(this.state.currentView)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles save job feature\r\n   * \r\n   * @param {*} e \r\n   */\r\n  handleSave(e) {\r\n    if (e.target.value === \"save\") {\r\n      JobPostDataService.saveHandle({ userId: this.state.currentUser.id, jobPostId: this.state.currentJobPost.id, save: true });\r\n      this.setState({ currentJobPostSaved: true });\r\n    }\r\n    else {\r\n      JobPostDataService.saveHandle({ userId: this.state.currentUser.id, jobPostId: this.state.currentJobPost.id, save: false });\r\n      this.setState({ currentJobPostSaved: false });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves saved job posts from database specific to a user\r\n   */\r\n  retrieveJobPosts() {\r\n    JobPostDataService.getAllSaved(this.state.currentUser.id)\r\n      .then(response => {\r\n        this.setState({\r\n          jobPosts: response.data\r\n        });\r\n        console.log(\"getallsaved response \" + response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Refreshes saved jobs list\r\n   */\r\n  refreshList() {\r\n    this.retrieveJobPosts();\r\n    this.setState({\r\n      currentJobPost: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets active job post to selected saved job post\r\n   * to view details\r\n   * \r\n   * @param {*} jobPost \r\n   * @param {*} index \r\n   */\r\n  setActiveJobPost(jobPost, index) {\r\n    this.setState({\r\n      currentJobPost: jobPost,\r\n      currentIndex: index\r\n    });\r\n    if (this.state.currentUser) {\r\n      var data = {\r\n        userId: this.state.currentUser.id,\r\n        jobPostId: jobPost.id\r\n      };\r\n      console.log(data);\r\n      JobPostDataService.findSaved(data).then(res => {\r\n        console.log('res.data.found = ' + res.data.found);\r\n        this.setState({\r\n          currentJobPostSaved: res.data.found ? true : false,\r\n        })\r\n      })\r\n      console.log(\"saved? \" + this.state.currentJobPostSaved);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all job posts\r\n   */\r\n  removeAllJobPosts() {\r\n    JobPostDataService.deleteAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve job posts from database with searched text in title\r\n   */\r\n  searchTitle() {\r\n\r\n    JobPostDataService.findByTitle(this.state.searchTitle)\r\n      .then(response => {\r\n        this.setState({\r\n          jobPosts: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Log out (job-seeker) user\r\n   */\r\n  logOut() {\r\n    AuthService.logout();\r\n  }\r\n\r\n  /**\r\n   * Log out business user\r\n   */\r\n  orgLogOut() {\r\n    AuthService.orgLogout();\r\n  }\r\n\r\n  /**\r\n   * Render saved jobs page component\r\n   */\r\n  render() {\r\n    const { searchTitle, jobPosts, currentJobPost, currentIndex, currentUser, currentView } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <div id=\"contentLayoutJobs\">\r\n          <div id=\"contentDiv\">\r\n            <div>\r\n              <section id=\"content\">\r\n                <ul id=\"category\">\r\n                  <div id='currentPage'>\r\n                    <a href=\"/jobposts\">\r\n                      <li id=\"ex\">Job Posts</li>\r\n                    </a>\r\n                  </div>\r\n                </ul>\r\n                <form id='searchbar'>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search by title\"\r\n                    value={searchTitle}\r\n                    onChange={this.onChangeSearchTitle}\r\n                  />\r\n                  <div className=\"input-group-append\">\r\n                    <button\r\n                      className=\"btn btn-outline-secondary\"\r\n                      type=\"button\"\r\n                      onClick={this.searchTitle}\r\n                    >\r\n                      Search\r\n                            </button>\r\n                  </div>\r\n                </form>\r\n                <article id='jobboard'>\r\n                  <div id='jobboardImage'>\r\n                    <div id=\"job-list\" className=\"job-list\">\r\n                      <div id=\"jobListHead\">\r\n                        <h4>Job Posts</h4>\r\n                        <ToggleButtonGroup type=\"radio\" name=\"jobViewOptions\" defaultValue={1}>\r\n                          <ToggleButton onClick={this.handleJobView} value={1}>List</ToggleButton>\r\n                          <ToggleButton onClick={this.handleJobView} value={2}>Map</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                      </div>\r\n                      <div id=\"indJobList\">\r\n                        {currentView === \"1\" && <ul className=\"list-group\">\r\n                          {jobPosts &&\r\n                            jobPosts.map((jobPost, index) => (\r\n                              <li\r\n                                className={\r\n                                  \"list-group-item \" +\r\n                                  (index === currentIndex ? \"active\" : \"\")\r\n                                }\r\n                                id={jobPost.title + jobPost.id}\r\n                                onClick={() => {\r\n\r\n                                  if (this.state.toggleHandler) { // triggers open job post animation             \r\n                                    this.setActiveJobPost(jobPost, index);\r\n                                    this.state.toggleHandler = false;\r\n                                    document.getElementById('job-list').classList.remove('job-list');\r\n                                    document.getElementById('job-list').classList.add('job-list-clicked');\r\n                                    document.getElementById('contentArea').classList.add('bgOpacity');\r\n                                  } else { // revert back\r\n                                    this.setActiveJobPost(\"\", \"\")\r\n                                    this.state.toggleHandler = true;\r\n                                    document.getElementById('job-list').classList.remove('job-list-clicked');\r\n                                    document.getElementById('job-list').classList.add('job-list');\r\n                                    document.getElementById('contentArea').classList.remove('bgOpacity');\r\n                                  }\r\n\r\n                                }}\r\n                                key={index}\r\n                                style={{ color: 'black' }}\r\n                              >\r\n                                {jobPost.title}\r\n                              </li>\r\n                            ))}\r\n                        </ul>}\r\n                      </div>\r\n                      {currentView === \"1\" && <div id=\"job-description-wrapper\">\r\n\r\n                        {currentJobPost && (\r\n                          <div id='job-description'>\r\n                            <h4>Job Post</h4>\r\n                            <div>\r\n                              <label>\r\n                                <strong>Title:</strong>\r\n                              </label>{\" \"}\r\n                              {currentJobPost.title}\r\n                            </div>\r\n                            <div>\r\n                              <label>\r\n                                <strong>Description:</strong>\r\n                              </label>{\" \"}\r\n                              {currentJobPost.description}\r\n                            </div>\r\n                            <div>\r\n                              <label>\r\n                                <strong>Job Type:</strong>\r\n                              </label>{\" \"}\r\n                              {currentJobPost.jobType}\r\n                            </div>\r\n                            <div>\r\n                              <label>\r\n                                <strong>Hourly Rate:</strong>\r\n                              </label>{\" \"}\r\n                              {currentJobPost.rate}\r\n                            </div>\r\n                            <div>\r\n                              <label>\r\n                                <strong>Start Date:</strong>\r\n                              </label>{\" \"}\r\n                              {currentJobPost.startDate}\r\n                            </div>\r\n                            <div>\r\n                              <label>\r\n                                <strong>Contract Length:</strong>\r\n                              </label>{\" \"}\r\n                              {currentJobPost.contractLength}\r\n                            </div>\r\n                            <Link\r\n                              to={\"/apply/\" + currentJobPost.id}\r\n                              className=\"badge badge-success\"\r\n                            >\r\n                              Apply\r\n                                    </Link>\r\n                            {currentUser && !this.state.currentJobPostSaved && <Button variant=\"info\" value=\"save\" onClick={this.handleSave}> Save </Button>}\r\n                            {currentUser && this.state.currentJobPostSaved && <Button variant=\"info\" value=\"unsave\" onClick={this.handleSave}> Unsave </Button>}\r\n                          </div>\r\n                        )}\r\n                      </div>}\r\n                    </div>\r\n                  </div>\r\n                </article>\r\n                <div id=\"map\" height=\"500px\" width=\"100%\">\r\n                  {currentView === \"2\" && jobPosts &&\r\n                    <MapContainer\r\n                      jobs={jobPosts}\r\n                      styling={{\r\n                        width: '80%',\r\n                        height: '300%',\r\n                        margin: '5px 100px'\r\n                      }}\r\n                    />}\r\n                </div>\r\n              </section>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SavedJobs;","import React, { Component } from \"react\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport UserDataService from \"../../services/user.service\";\r\nimport \"../Layouts/ContentLayout.css\"\r\nimport \"./profile.css\";\r\nimport { createBrowserHistory } from 'history';\r\nexport const browserHistory = createBrowserHistory();\r\n\r\nexport default class EditUserProfile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeEmail = this.onChangeEmail.bind(this);\r\n        this.onChangeFullName = this.onChangeFullName.bind(this);\r\n        this.onChangePhoneNumber = this.onChangePhoneNumber.bind(this);\r\n        this.retrieveUserInfo = this.retrieveUserInfo.bind(this);\r\n        this.updateUser = this.updateUser.bind(this);\r\n        this.returnToUserProfile = this.returnToUserProfile.bind(this);\r\n\r\n        this.state = {\r\n            currentUser: {\r\n                id: null,\r\n                username: \"\",\r\n                fullName: \"\",\r\n                phoneNumber: \"\",\r\n                email: \"\",\r\n                password: \"\",\r\n                createdAt: \"\",\r\n                updatedAt: \"\"\r\n              },\r\n              mounted: false\r\n        };\r\n    }\r\n\r\n    /** Get the user information */\r\n    componentDidMount() {\r\n        const user = AuthService.getCurrentUser();\r\n        this.retrieveUserInfo(user.id);\r\n    }\r\n\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if ( this.state.mounted ) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n\r\n    /** Retrieves all current user data */\r\n    retrieveUserInfo(id) {\r\n        UserDataService.findOneUser(id)\r\n            .then(response => {\r\n                this.setState({\r\n                    currentUser: response.data\r\n                });\r\n                console.log(this.state.currentUser);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    /** Update new user's full name to the state */\r\n    onChangeFullName(e) {\r\n        const fullName = e.target.value;\r\n\r\n        this.setState(prevState => ({\r\n            currentUser: {\r\n                ...prevState.currentUser,\r\n                fullName: fullName\r\n            }\r\n        }));\r\n    }\r\n\r\n    /** Update new user email to the state */\r\n    onChangeEmail(e) {\r\n        const email = e.target.value;\r\n\r\n        this.setState(prevState => ({\r\n            currentUser: {\r\n                ...prevState.currentUser,\r\n                email: email\r\n            }\r\n        }));\r\n    }\r\n\r\n    /** Update new user phone number to the state */\r\n    onChangePhoneNumber(e) {\r\n        const phoneNumber = e.target.value;\r\n\r\n        this.setState(prevState => ({\r\n            currentUser: {\r\n                ...prevState.currentUser,\r\n                phoneNumber: phoneNumber\r\n            }\r\n        }));\r\n    }\r\n\r\n    /** Update new user information to the database */\r\n    updateUser() {\r\n        UserDataService.updateUser(\r\n            this.state.currentUser.id,\r\n            this.state.currentUser.phoneNumber,\r\n            this.state.currentUser.email,\r\n            this.state.currentUser.fullName\r\n        ).then(response => {\r\n            console.log(response ? \"success\" : \"fail\");\r\n            browserHistory.push('/userProfile');\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n\r\n       //this.props.history.push('/userProfile');\r\n    }\r\n\r\n    returnToUserProfile() {\r\n        // this.props.history.push('/userProfile');\r\n    }\r\n\r\n    render() {\r\n        const { currentUser } = this.state;\r\n\r\n        return (\r\n            <div id=\"contentLayoutAddJobFix\">\r\n                <div id=\"contentDiv\">\r\n\r\n                    <div id=\"profile-edit-background\">\r\n                        {currentUser ? (\r\n                            <div>\r\n                                <h3 id=\"edit-profile-tite\">Update Profile</h3>\r\n                                <div>\r\n                                    <form id=\"edit-profile-form\">\r\n\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"fullName\">Full Name</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"fullName\"\r\n                                                value={currentUser.fullName}\r\n                                                // value={\"\"}\r\n                                                onChange={this.onChangeFullName}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"email\">Email</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"email\"\r\n                                                value={currentUser.email}\r\n                                                // value={\"\"}\r\n                                                onChange={this.onChangeEmail}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlForm=\"phoneNumber\">Phone Number</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"phoneNumber\"\r\n                                                value={currentUser.phoneNumber}\r\n                                                // value={\"\"}\r\n                                                onChange={this.onChangePhoneNumber}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <button\r\n                                            type=\"submit\"\r\n                                            id=\"update-btn\"\r\n                                            className=\"badge badge-success\"\r\n                                            onClick={this.updateUser()}\r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                    </form>\r\n                                    <p>{this.state.message}</p>\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                                <div>\r\n                                    <br />\r\n                                    <p>...</p>\r\n                                </div>\r\n                            )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport \"../Layouts/ContentLayout.css\"\r\nimport JobPostDataService from \"../../services/jobPost.service\";\r\n\r\n\r\n\r\nexport default class OrgProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.retrieveJobPosts = this.retrieveJobPosts.bind(this)\r\n    this.state = {\r\n      currentUser: AuthService.getCurrentOrgUser(),\r\n      jobPosts: []\r\n    };\r\n  }\r\n\r\n  /** Call retrieveJobPost method */\r\n  componentDidMount() {\r\n    this.retrieveJobPosts();\r\n  }\r\n\r\n  /** Get all job posts that the org user has posted */\r\n  retrieveJobPosts() {\r\n    console.log(this.state.currentUser.id)\r\n    JobPostDataService.getAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        let orgJobList = []\r\n        let i = 0;\r\n        for (i = 0; i < response.data.length; i++) {\r\n          if (response.data[i].orgID == this.state.currentUser.id) {\r\n            orgJobList.push(response.data[i].title)\r\n          }\r\n        }\r\n\r\n        /** Push the job posts in the database to the component's state */\r\n        this.setState({\r\n          jobPosts: orgJobList\r\n        });\r\n        console.log(this.state.jobPosts);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const { currentUser } = this.state;\r\n    const jobPostings = this.state.jobPosts.map((title) => { return <li style={{ color: 'black' }}>{title}</li>; });\r\n    console.log(this.state.jobPosts)\r\n\r\n\r\n    return (\r\n      <div id=\"contentLayout\">\r\n        <div id=\"contentUserProfileDiv\">\r\n          <div>\r\n            <div className=\"container\">\r\n              <header className=\"\">\r\n                <h3>\r\n                  <strong>Organization Profile</strong>\r\n                </h3>\r\n              </header>\r\n              <p>\r\n                <strong>Name:</strong>{\" \"}\r\n                {currentUser.username}\r\n              </p>\r\n              <p>\r\n                <strong>Id:</strong>{\" \"}\r\n                {currentUser.id}\r\n              </p>\r\n              <p>\r\n                <strong>Email:</strong>{\" \"}\r\n                {currentUser.email}\r\n              </p>\r\n              <strong>Current Postings:</strong>\r\n              <ul>\r\n                {jobPostings}\r\n              </ul>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './jobBoard.css'\r\nimport JobPostDataService from \"../../services/jobPost.service\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FacebookProvider, Share } from 'react-facebook';\r\nimport { TwitterShareButton } from 'react-twitter-embed';\r\n\r\n\r\n/**\r\n * Creates organzation's job board page component\r\n */\r\nclass OrgJobBoardPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n    this.retrieveJobPosts = this.retrieveJobPosts.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveJobPost = this.setActiveJobPost.bind(this);\r\n    this.removeAllJobPosts = this.removeAllJobPosts.bind(this);\r\n    this.searchTitle = this.searchTitle.bind(this);\r\n    this.handleSave = this.handleSave.bind(this);\r\n    this.createJobMessage = this.createJobMessage.bind(this);\r\n\r\n    this.state = {\r\n      jobPosts: [],\r\n      currentJobPost: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\",\r\n      toggleHandler: true,\r\n      currentJobPostSaved: true,\r\n      currentUser: AuthService.getCurrentOrgUser(),\r\n      currentJobMsg: \"\"\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calls function to retrieve organization's job posts, immediately\r\n   */\r\n  componentDidMount() {\r\n    this.retrieveJobPosts();\r\n  }\r\n\r\n  /**\r\n   * Updates text to search by title\r\n   * \r\n   * @param {*} e \r\n   */\r\n  onChangeSearchTitle(e) {\r\n    const searchTitle = e.target.value;\r\n\r\n    this.setState({\r\n      searchTitle: searchTitle\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles save of job post\r\n   * \r\n   * @param {*} e \r\n   */\r\n  handleSave(e) {\r\n    if (e.target.value === \"save\") {\r\n      JobPostDataService.saveHandle({ userId: this.state.currentUser.id, jobPostId: this.state.currentJobPost.id, save: true })\r\n    }\r\n    else {\r\n      JobPostDataService.saveHandle({ userId: this.state.currentUser.id, jobPostId: this.state.currentJobPost.id, save: false })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves a list of the current organization's job posts from the database\r\n   */\r\n  retrieveJobPosts() {\r\n    console.log(this.state.currentUser.id)\r\n\r\n    // Gets all of the job posts from the database.\r\n    JobPostDataService.getAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        let orgJobList = []\r\n        let i = 0;\r\n\r\n        // Creates a list of job posts that have the same orgID property as the currently logged in user.\r\n        for (i = 0; i < response.data.length; i++) {\r\n          if (response.data[i].orgID == this.state.currentUser.id) {\r\n            orgJobList.push(response.data[i])\r\n          }\r\n        }\r\n\r\n        // Sets the current state of jobPosts to the orgJobList\r\n        this.setState({\r\n          jobPosts: orgJobList\r\n        });\r\n        console.log(this.state.jobPosts);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Refreshes the list of job posts being displayed\r\n   */\r\n  refreshList() {\r\n    this.retrieveJobPosts();\r\n    this.setState({\r\n      currentJobPost: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Performs the logic allowing a user to select a job post from the job board.\r\n   * \r\n   * @param {*} jobPost \r\n   * @param {*} index \r\n   */\r\n  setActiveJobPost(jobPost, index) {\r\n\r\n    /** Sets the currently selected job post to the job selected by the user */\r\n    this.setState({\r\n      currentJobPost: jobPost,\r\n      currentIndex: index\r\n    });\r\n    if (this.state.currentUser) {\r\n      var data = {\r\n        userId: this.state.currentUser.id,\r\n        jobPostId: jobPost.id\r\n      };\r\n      console.log(data);\r\n      JobPostDataService.findSaved(data).then(res => {\r\n        console.log('res.data.found = ' + res.data.found);\r\n        this.setState({\r\n          currentJobPostSaved: res.data.found ? true : false,\r\n        })\r\n      })\r\n      console.log(this.state.currentJobPostSaved);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes all job posts from the database\r\n   */\r\n  removeAllJobPosts() {\r\n    JobPostDataService.deleteAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Searches for a job post with a title matching the search parameter\r\n   */\r\n  searchTitle() {\r\n    JobPostDataService.findByTitle(this.state.searchTitle)\r\n      .then(response => {\r\n        this.setState({\r\n          jobPosts: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Returns a formatted message about the currently selected job post to share on social media\r\n   * \r\n   * @param {*} title \r\n   * @param {*} description \r\n   * @param {*} jobType \r\n   * @param {*} rate \r\n   * @param {*} startDate \r\n   * @param {*} contractLength \r\n   */\r\n  createJobMessage(title, description, jobType, rate, startDate, contractLength) {\r\n    return `New Job Listing: ` + title + `\\n` + `Description: ` + description + `\\n` + `Job Type: ` + jobType + `\\n` + `Rate: ` + rate + `\\n` + `Start Date: ` + startDate + `\\n` + `Contract Length: ` + contractLength + `\\n` + `\\n`\r\n  }\r\n\r\n  /**\r\n   * Renders organization job board page component\r\n   */\r\n  render() {\r\n    const { searchTitle, jobPosts, currentJobPost, currentIndex, currentUser } = this.state;\r\n\r\n    return (\r\n      <div id=\"contentLayoutJobs\">\r\n        <div id=\"contentDiv\">\r\n          <div>\r\n            <section id=\"content\">\r\n              <ul id=\"category\">\r\n                <div id='currentPage'>\r\n                  <a href=\"/orgJobBoard\">\r\n                    <li class=\"hover\">My Job Posts</li>\r\n                  </a>\r\n                </div>\r\n                <a href=\"/viewapplicants\">\r\n                  <li id=\"ex\">View Applicants</li>\r\n                </a>\r\n              </ul>\r\n              <form id='searchbar'>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search by title\" value={searchTitle} onChange={this.onChangeSearchTitle} />\r\n                <div className=\"input-group-append\">\r\n                  <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={this.searchTitle}>Search</button>\r\n                </div>\r\n              </form>\r\n              <article id='jobboard'>\r\n                <div id='jobboardImage'>\r\n                  <div id=\"job-list\" className=\"job-list\">\r\n                    <h4 id=\"jobListHead\">Job Posts</h4>\r\n                    <div id=\"jobListWrapper\">\r\n                      <ul className=\"list-group\">\r\n                        {jobPosts &&\r\n                          jobPosts.map((jobPost, index) => (\r\n                            <li\r\n                              className={\r\n                                \"list-group-item \" +\r\n                                (index === currentIndex ? \"active\" : \"\")\r\n                              }\r\n                              id={jobPost.title + jobPost.id}\r\n                              onClick={() => {\r\n                                if (this.state.toggleHandler) { // triggers open job post animation             \r\n                                  this.setActiveJobPost(jobPost, index);\r\n                                  this.state.toggleHandler = false;\r\n                                  document.getElementById('job-list').classList.remove('job-list');\r\n                                  document.getElementById('job-list').classList.add('job-list-clicked');\r\n                                  document.getElementById('contentArea').classList.add('bgOpacity');\r\n                                } else { // revert back\r\n                                  this.setActiveJobPost(\"\", \"\")\r\n                                  this.state.toggleHandler = true;\r\n                                  document.getElementById('job-list').classList.remove('job-list-clicked');\r\n                                  document.getElementById('job-list').classList.add('job-list');\r\n                                  document.getElementById('contentArea').classList.remove('bgOpacity');\r\n                                }\r\n                              }}\r\n                              key={index}\r\n                              style={{ color: 'black' }}\r\n                            >\r\n                              {jobPost.title}\r\n                            </li>\r\n                          ))}\r\n                      </ul>\r\n                    </div>\r\n                    <div id=\"job-description-wrapper\">\r\n                      {currentJobPost && (\r\n                        <div id='job-description'>\r\n                          <h4>Job Post</h4>\r\n                          <div>\r\n                            <label>\r\n                              <strong>Title:</strong>\r\n                            </label>{\" \"}\r\n                            {currentJobPost.title}\r\n                          </div>\r\n                          <div>\r\n                            <label>\r\n                              <strong>Description:</strong>\r\n                            </label>{\" \"}\r\n                            {currentJobPost.description}\r\n                          </div>\r\n                          <div>\r\n                            <label>\r\n                              <strong>Job Type:</strong>\r\n                            </label>{\" \"}\r\n                            {currentJobPost.jobType}\r\n                          </div>\r\n                          <div>\r\n                            <label>\r\n                              <strong>Hourly Rate:</strong>\r\n                            </label>{\" \"}\r\n                            {currentJobPost.rate}\r\n                          </div>\r\n                          <div>\r\n                            <label>\r\n                              <strong>Start Date:</strong>\r\n                            </label>{\" \"}\r\n                            {currentJobPost.startDate}\r\n                          </div>\r\n                          <div>\r\n                            <label>\r\n                              <strong>Contract Length:</strong>\r\n                            </label>{\" \"}\r\n                            {currentJobPost.contractLength}\r\n                          </div>\r\n                          <Link to={\"/jobPosts/\" + currentJobPost.id} className=\"badge badge-warning\">Edit</Link>\r\n                          <FacebookProvider appId=\"702487117185786\">\r\n                            <Share quote={this.createJobMessage(currentJobPost.title, currentJobPost.description, currentJobPost.jobType, currentJobPost.rate, currentJobPost.startDate, currentJobPost.contractLength)} href=\"https://helpservices.herokuapp.com/jobPosts\">\r\n                              {({ handleClick, loading }) => (\r\n                                <button type=\"button\" disabled={loading} onClick={handleClick}>Share on Facebook</button>\r\n                              )}\r\n                            </Share>\r\n                          </FacebookProvider>\r\n                          <TwitterShareButton\r\n                            url={'https://helpservices.herokuapp.com/jobPosts'}\r\n                            options={{ text: this.createJobMessage(currentJobPost.title, currentJobPost.description, currentJobPost.jobType, currentJobPost.rate, currentJobPost.startDate, currentJobPost.contractLength) }}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </article>\r\n            </section>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OrgJobBoardPage","import React, { Component, Fragment } from \"react\";\r\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\r\nimport './jobBoard.css'\r\nimport ApplyDataService from \"../../services/apply.service\";\r\nimport AuthService from \"../../services/auth.service\";\r\n\r\n/**\r\n * Creates view applicant page component\r\n */\r\nclass ViewApplicantPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n        this.retrieveApplicants = this.retrieveApplicants.bind(this);\r\n        this.refreshList = this.refreshList.bind(this);\r\n        this.setActiveApplicant = this.setActiveApplicant.bind(this);\r\n        this.searchTitle = this.searchTitle.bind(this);\r\n\r\n        this.state = {\r\n            applicants: [],\r\n            currentApplicant: null,\r\n            currentIndex: -1,\r\n            searchTitle: \"\",\r\n            toggleHandler: true,\r\n            currentUser: AuthService.getCurrentOrgUser()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * When this component loads, a list of applicants is retrieved for the organization's job posts \r\n     */\r\n    componentDidMount() {\r\n        this.retrieveApplicants();\r\n    }\r\n\r\n    /**\r\n     * An event listener for when a user types in the search bar\r\n     * \r\n     * @param {*} e \r\n     */\r\n    onChangeSearchTitle(e) {\r\n        const searchTitle = e.target.value;\r\n        this.setState({\r\n            searchTitle: searchTitle\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Retrieves all data from application/user/jobPost tables \r\n     * where orgID = currentOrgUser id\r\n     * \r\n     * @param {*} e \r\n     */\r\n    retrieveApplicants() {\r\n        console.log(this.state.currentUser.id);\r\n\r\n        ApplyDataService.findAllOrgApplicants(this.state.currentUser.id)\r\n            .then(response => {\r\n                this.setState({\r\n                    applicants: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Refreshes list of applicants\r\n     */\r\n    refreshList() {\r\n        this.retrieveApplicants();\r\n        this.setState({\r\n            currentApplicant: null,\r\n            currentIndex: -1\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets active applicant to view details\r\n     * \r\n     * @param {*} application \r\n     * @param {*} index \r\n     */\r\n    setActiveApplicant(application, index) {\r\n        this.setState({\r\n            currentApplicant: application,\r\n            currentIndex: index\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Will allow orgUsers to search for specific applicants\r\n     */\r\n    searchTitle() {\r\n        // Search bar logic to go here\r\n    };\r\n\r\n    /**\r\n     * Renders view applicant page component\r\n     */\r\n    render() {\r\n        const { searchTitle, applicants, currentApplicant, currentIndex, currentUser } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <div id=\"contentLayoutJobs\">\r\n                    <div id=\"contentDiv\">\r\n                        <div>\r\n                            <section id=\"content\">\r\n                                <ul id=\"category\">\r\n                                    <a href=\"/orgJobBoard\">\r\n                                        <li class=\"hover\">My Job Posts</li>\r\n                                    </a>\r\n                                    <div id='currentPage'>\r\n                                        <a href=\"/viewapplicantpage\">\r\n                                            <li id=\"ex\">View Applicants</li>\r\n                                        </a>\r\n                                    </div>\r\n                                </ul>\r\n                                <form id='searchbar'>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Search by title\"\r\n                                        value={searchTitle}\r\n                                        onChange={this.onChangeSearchTitle}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            className=\"btn btn-outline-secondary\"\r\n                                            type=\"button\"\r\n                                            onClick={this.searchTitle}\r\n                                        >\r\n                                            Search\r\n                                        </button>\r\n                                    </div>\r\n                                </form>\r\n                                <article id='jobboard'>\r\n                                    <div id='jobboardImage'>\r\n                                        <div id=\"job-list\" className=\"job-list\">\r\n                                            <h4>Applicants</h4>\r\n                                            <div id=\"jobListWrapper\">\r\n                                                <ul className=\"list-group\">\r\n                                                    {applicants &&\r\n                                                        applicants.map((applicant, index) => (\r\n                                                            <li\r\n                                                            className={\r\n                                                                \"list-group-item \" +\r\n                                                                (index === currentIndex ? \"active\" : \"\")\r\n                                                            }\r\n                                                            id={applicant.id}\r\n                                                            onClick={() => {\r\n                                                                if (this.state.toggleHandler) { // triggers open job post animation             \r\n                                                                    this.setActiveApplicant(applicant, index);\r\n                                                                    this.state.toggleHandler = false;\r\n                                                                    document.getElementById('job-list').classList.remove('job-list');\r\n                                                                    document.getElementById('job-list').classList.add('job-list-clicked');\r\n                                                                    document.getElementById('contentArea').classList.add('bgOpacity');\r\n                                                                } else { // revert back\r\n                                                                    this.setActiveApplicant(\"\", \"\")\r\n                                                                    this.state.toggleHandler = true;\r\n                                                                    document.getElementById('job-list').classList.remove('job-list-clicked');\r\n                                                                    document.getElementById('job-list').classList.add('job-list');\r\n                                                                    document.getElementById('contentArea').classList.remove('bgOpacity');\r\n                                                                }\r\n                                                            }}\r\n                                                            key={index}\r\n                                                            style={{ color: 'black' }}\r\n                                                        >\r\n                                                            {applicant.jobPost.title + \"    -    \" + applicant.user.username}\r\n                                                        </li>\r\n                                                    ))}\r\n                                            </ul>\r\n                                        </div>\r\n\r\n                                        <div id=\"job-description-wrapper\">\r\n\r\n                                            {currentApplicant && (\r\n                                                <div id='job-description'>\r\n                                                    <h2>Applicant</h2>\r\n                                                    <div>\r\n                                                        <label>\r\n                                                            <h4>Position:</h4>\r\n                                                        </label>{\" \"}\r\n                                                        {currentApplicant.jobPost.title}\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <label>\r\n                                                            <h4>Applicant:</h4>\r\n                                                        </label>{\" \"}\r\n                                                        {currentApplicant.user.fullName}\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <label>\r\n                                                            <h4>Comments:</h4>\r\n                                                        </label>{\" \"}\r\n                                                        {currentApplicant.comments}\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <label>\r\n                                                            <h4>Email:</h4>\r\n                                                        </label>{\" \"}\r\n                                                        {currentApplicant.user.email}\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <label>\r\n                                                            <h4>Phone Number:</h4>\r\n                                                        </label>{\" \"}\r\n                                                        {currentApplicant.user.phoneNumber}\r\n                                                    </div>\r\n                                                    <a href={currentApplicant.resumePath} >View Resume</a>\r\n                                                    <DropdownButton id=\"dropdown-basic-button\" title=\"Application Status\">\r\n                                                        <Dropdown.Item onClick={() => ApplyDataService.updateStatus(currentApplicant.id, \"pending\")}> Pending </Dropdown.Item>\r\n                                                        <Dropdown.Item onClick={() => ApplyDataService.updateStatus(currentApplicant.id, \"accepted\")}> Accepted </Dropdown.Item>\r\n                                                        <Dropdown.Item onClick={() => ApplyDataService.updateStatus(currentApplicant.id, \"rejected\")}> Rejected </Dropdown.Item>\r\n                                                    </DropdownButton>\r\n                                                </div>\r\n                                            )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </article>\r\n                            </section>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ViewApplicantPage;","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport AddJobPost from \"./components/JobBoardPage/add-jobPost.component\";\r\nimport JobPost from \"./components/JobBoardPage/jobPost.component\";\r\nimport Apply from \"./components/ApplyPage/apply.component\";\r\nimport JobPostsList from \"./components/JobBoardPage/JobBoardPage\";\r\nimport Register from \"./components/Registration/register.component\";\r\nimport LogIn from \"./components/Login/logIn.component\";\r\nimport Bodyframe from './components/Bodyframe/Bodyframe.js';\r\nimport Footer from './components/Footer/Footer.js';\r\nimport UserProfile from \"./components/Profiles/user-profile.component\";\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\nimport './Navbar.css'\r\nimport AuthService from \"./services/auth.service\";\r\nimport AboutUs from './components/AboutUs/aboutUs.component';\r\nimport SavedJobPosts from './components/JobBoardPage/savedJobs.component';\r\nimport EditUserProfile from './components/Profiles/editUserProfile.component';\r\nimport OrgProfile from './components/Profiles/org-profile.component'\r\nimport OrgJobBoard from './components/JobBoardPage/OrgJobBoardPage.js'\r\nimport ViewApplicants from './components/JobBoardPage/ViewApplicantPage';\r\nimport GoogleMap from './components/GoogleMap/map.component';\r\nimport SearchLocation from './components/GoogleMap/mapSearch';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.logOut = this.logOut.bind(this);\r\n    this.orgLogOut = this.orgLogOut.bind(this);\r\n\r\n    this.state = {\r\n      currentUser: AuthService.getCurrentUser,\r\n      currentOrgUser: AuthService.getCurrentOrgUser\r\n    };\r\n  }\r\n\r\n  /** Get user data to the component's state */\r\n  componentDidMount() {\r\n      this.setState({\r\n        currentUser: AuthService.getCurrentUser(),\r\n        currentOrgUser: AuthService.getCurrentOrgUser()\r\n      });\r\n  }\r\n\r\n  /** Log out individual user */\r\n  logOut() {\r\n    AuthService.logout();\r\n  }\r\n\r\n  /** Log out organization user */\r\n  orgLogOut() {\r\n    AuthService.orgLogout();\r\n  }\r\n\r\n  render() {\r\n    const { currentUser, currentOrgUser } = this.state;\r\n    return (\r\n      <Router>\r\n        <Navbar style={{ backgroundColor: \"#2743A5\" }} expand=\"sm\">\r\n          <Navbar.Brand className=\"navBrand\" id=\"navBrand\" style={{ fontFamily: \"Racing Sans One\", color: \"white\", fontSize: \"30px\" }}>help!</Navbar.Brand>\r\n          <Navbar.Toggle id=\"collapseButton\" aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              {!currentUser &&! currentOrgUser && <Nav.Link id=\"navLink\" href=\"/register\">Register</Nav.Link>}\r\n              {!currentOrgUser && <Nav.Link id=\"navLink\" href=\"/jobPosts\">Job Board</Nav.Link>}\r\n              {currentOrgUser && <Nav.Link id=\"navLink\" href=\"/orgJobBoard\">Job Board</Nav.Link>}\r\n              {currentOrgUser && <Nav.Link id=\"navLink\" href=\"/orgProfile\">My Profile</Nav.Link>}\r\n              {currentOrgUser && <Nav.Link id=\"navLink\" href=\"/add\">Add Job</Nav.Link>}\r\n              {currentUser && <Nav.Link id=\"navLink\" href=\"/userProfile\">My Profile</Nav.Link>}\r\n              {currentUser && <Nav.Link id=\"navLink\" href=\"/savedJobs\">Saved Jobs</Nav.Link>}\r\n              {!currentUser && !currentOrgUser && <Nav.Link id=\"navLink\" href=\"/logIn\">Log In</Nav.Link>}\r\n              {currentUser && <Nav.Link id=\"navLink\" href=\"/logIn\" onClick={this.logOut}>Log Out</Nav.Link>}\r\n              {currentOrgUser && <Nav.Link id=\"navLink\" href=\"/logIn\" onClick={this.orgLogOut}>Log Out</Nav.Link>}\r\n              <Nav.Link id=\"navLink\" href=\"/aboutUs\">About Us</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <Bodyframe />\r\n        <Switch>\r\n          <Route exact path=\"/jobPostsMap\" component={GoogleMap} />\r\n          <Route exact path=\"/savedJobs\" component={SavedJobPosts} />\r\n          <Route exact path=\"/logIn\" component={LogIn} />\r\n          <Route exact path=\"/apply/:id\" component={Apply} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path={[\"/\", \"/jobPosts\"]} component={JobPostsList} />\r\n          <Route exact path=\"/add\" component={AddJobPost} />\r\n          <Route path=\"/jobPosts/:id\" component={JobPost} />\r\n          <Route path=\"/userProfile\" component={UserProfile} />\r\n          <Route path=\"/aboutUs\" component={AboutUs} />\r\n          <Route path=\"/orgProfile\" component={OrgProfile}/>\r\n          <Route path=\"/orgJobBoard\" component={OrgJobBoard}/>\r\n\r\n          <Route exact path=\"/viewApplicants\" component={ViewApplicants} /> \r\n          <Route path=\"/mapsearch\" component={SearchLocation} />\r\n          <Route path=\"/editUserProfile\" component={EditUserProfile} />\r\n\r\n        </Switch>\r\n\r\n        <footer>\r\n          <Footer />\r\n        </footer>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.f8452c9a.jpg\";"],"sourceRoot":""}